{"version":3,"sources":["../src/message_drawer_view_overview_section.js"],"names":["define","$","CustomEvents","Notification","PubSub","Str","Templates","UserDate","MessageRepository","MessageDrawerEvents","MessageDrawerRouter","MessageDrawerRoutes","LazyLoadList","MessageDrawerViewConversationContants","SELECTORS","TOGGLE","CONVERSATION","BLOCKED_ICON_CONTAINER","LAST_MESSAGE","LAST_MESSAGE_DATE","UNREAD_COUNT","SECTION_TOTAL_COUNT","SECTION_TOTAL_COUNT_CONTAINER","SECTION_UNREAD_COUNT","PLACEHOLDER_CONTAINER","TEMPLATES","CONVERSATIONS_LIST","CONVERSATIONS_LIST_ITEMS_PLACEHOLDER","LOAD_LIMIT","loadedConversationsById","loadedTotalCounts","loadedUnreadCounts","isVisible","root","getRoot","hasClass","setExpanded","addClass","setCollapsed","removeClass","renderTotalCount","count","container","find","countElement","text","numPlaceholders","placeholders","Array","apply","map","render","then","html","placeholderContainer","catch","renderUnreadCount","contentContainer","conversations","userId","formattedConversations","conversation","lastMessage","messages","length","formattedConversation","id","imageurl","name","subname","unreadcount","lastmessagedate","timecreated","sentfromcurrentuser","useridfrom","lastmessage","type","CONVERSATION_TYPES","PRIVATE","otherUser","members","reduce","carry","member","userid","showonlinestatus","isonline","isblocked","PUBLIC","lastsendername","fullname","append","exception","getLoadCallback","includeFavourites","offset","getConversations","response","slice","setLoadedAll","forEach","getTotalConversationCountElement","getTotalUnreadConversationCountElement","incrementTotalConversationCount","element","parseInt","decrementTotalConversationCount","decrementTotalUnreadConversationCount","getConversationElement","conversationId","getConversationElementFromUserId","blockContact","conversationElement","unblockContact","updateLastMessage","message","senderString","senderStringRequest","fromLoggedInUser","key","component","param","userFrom","stringRequests","get_strings","strings","get","timestamp","timeCreated","format","dates","dateString","createNewConversation","existingConversations","listRoot","showContent","hideEmptyMessage","messageCount","imageUrl","getContentContainer","prepend","deleteConversation","remove","hideContent","showEmptyMessage","markConversationAsRead","unreadCount","registerEventListeners","loadCallback","toggle","css","outerHeight","on","show","subscribe","CONTACT_BLOCKED","CONTACT_UNBLOCKED","CONVERSATION_NEW_LAST_MESSAGE","isFavourite","CONVERSATION_DELETED","CONVERSATION_READ","CONVERSATION_SET_FAVOURITE","CONVERSATION_UNSET_FAVOURITE","events","activate","e","data","target","closest","attr","go","VIEW_CONVERSATION","originalEvent","preventDefault","totalCountPromise","unreadCountPromise"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls a section of the overview page in the message drawer.\n *\n * @module     core_message/message_drawer_view_overview_section\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(\n[\n    'jquery',\n    'core/custom_interaction_events',\n    'core/notification',\n    'core/pubsub',\n    'core/str',\n    'core/templates',\n    'core/user_date',\n    'core_message/message_repository',\n    'core_message/message_drawer_events',\n    'core_message/message_drawer_router',\n    'core_message/message_drawer_routes',\n    'core_message/message_drawer_lazy_load_list',\n    'core_message/message_drawer_view_conversation_constants'\n],\nfunction(\n    $,\n    CustomEvents,\n    Notification,\n    PubSub,\n    Str,\n    Templates,\n    UserDate,\n    MessageRepository,\n    MessageDrawerEvents,\n    MessageDrawerRouter,\n    MessageDrawerRoutes,\n    LazyLoadList,\n    MessageDrawerViewConversationContants\n) {\n\n    var SELECTORS = {\n        TOGGLE: '[data-region=\"toggle\"]',\n        CONVERSATION: '[data-conversation-id]',\n        BLOCKED_ICON_CONTAINER: '[data-region=\"contact-icon-blocked\"]',\n        LAST_MESSAGE: '[data-region=\"last-message\"]',\n        LAST_MESSAGE_DATE: '[data-region=\"last-message-date\"]',\n        UNREAD_COUNT: '[data-region=\"unread-count\"]',\n        SECTION_TOTAL_COUNT: '[data-region=\"section-total-count\"]',\n        SECTION_TOTAL_COUNT_CONTAINER: '[data-region=\"section-total-count-container\"]',\n        SECTION_UNREAD_COUNT: '[data-region=\"section-unread-count\"]',\n        PLACEHOLDER_CONTAINER: '[data-region=\"placeholder-container\"]'\n    };\n\n    var TEMPLATES = {\n        CONVERSATIONS_LIST: 'core_message/message_drawer_conversations_list',\n        CONVERSATIONS_LIST_ITEMS_PLACEHOLDER: 'core_message/message_drawer_conversations_list_items_placeholder'\n    };\n\n    var LOAD_LIMIT = 50;\n    var loadedConversationsById = {};\n    var loadedTotalCounts = false;\n    var loadedUnreadCounts = false;\n\n    /**\n     * Get the section visibility status.\n     *\n     * @param  {Object} root The section container element.\n     * @return {Bool} Is section visible.\n     */\n    var isVisible = function(root) {\n        return LazyLoadList.getRoot(root).hasClass('show');\n    };\n\n    /**\n     * Set this section as expanded.\n     *\n     * @param  {Object} root The section container element.\n     */\n    var setExpanded = function(root) {\n        root.addClass('expanded');\n    };\n\n    /**\n     * Set this section as collapsed.\n     *\n     * @param  {Object} root The section container element.\n     */\n    var setCollapsed = function(root) {\n        root.removeClass('expanded');\n    };\n\n    /**\n     * Render the total count value and show it for the user. Also update the placeholder\n     * HTML for better visuals.\n     *\n     * @param {Object} root The section container element.\n     * @param {Number} count The total count\n     */\n    var renderTotalCount = function(root, count) {\n        var container = root.find(SELECTORS.SECTION_TOTAL_COUNT_CONTAINER);\n        var countElement = container.find(SELECTORS.SECTION_TOTAL_COUNT);\n        countElement.text(count);\n        container.removeClass('hidden');\n\n        var numPlaceholders = count > 20 ? 20 : count;\n        // Array of \"true\" up to the number of placeholders we want.\n        var placeholders = Array.apply(null, Array(numPlaceholders)).map(function() {\n            return true;\n        });\n\n        // Replace the current placeholder (loading spinner) with some nicer placeholders that\n        // better represent the content.\n        Templates.render(TEMPLATES.CONVERSATIONS_LIST_ITEMS_PLACEHOLDER, {placeholders: placeholders})\n            .then(function(html) {\n                var placeholderContainer = root.find(SELECTORS.PLACEHOLDER_CONTAINER);\n                placeholderContainer.html(html);\n                return;\n            })\n            .catch(function() {\n                // Silently ignore. Doesn't matter if we can't render the placeholders.\n            });\n    };\n\n    /**\n     * Render the unread count value and show it for the user if it's higher than zero.\n     *\n     * @param {Object} root The section container element.\n     * @param {Number} count The unread count\n     */\n    var renderUnreadCount = function(root, count) {\n        var countElement = root.find(SELECTORS.SECTION_UNREAD_COUNT);\n        countElement.text(count);\n\n        if (count > 0) {\n            countElement.removeClass('hidden');\n        }\n    };\n\n    /**\n     * Render the messages in the overview page.\n     *\n     * @param {Object} contentContainer Conversations content container.\n     * @param {Array} conversations List of conversations to render.\n     * @param {Number} userId Logged in user id.\n     * @return {Object} jQuery promise.\n     */\n    var render = function(contentContainer, conversations, userId) {\n        var formattedConversations = conversations.map(function(conversation) {\n\n            var lastMessage = conversation.messages.length ? conversation.messages[conversation.messages.length - 1] : null;\n\n            var formattedConversation = {\n                id: conversation.id,\n                imageurl: conversation.imageurl,\n                name: conversation.name,\n                subname: conversation.subname,\n                unreadcount: conversation.unreadcount,\n                lastmessagedate: lastMessage ? lastMessage.timecreated : null,\n                sentfromcurrentuser: lastMessage ? lastMessage.useridfrom == userId : null,\n                lastmessage: lastMessage ? $(lastMessage.text).text() || lastMessage.text : null\n            };\n\n            if (conversation.type == MessageDrawerViewConversationContants.CONVERSATION_TYPES.PRIVATE) {\n                var otherUser = conversation.members.reduce(function(carry, member) {\n                    if (!carry && member.id != userId) {\n                        carry = member;\n                    }\n                    return carry;\n                }, null);\n\n                formattedConversation.userid = otherUser.id;\n                formattedConversation.showonlinestatus = otherUser.showonlinestatus;\n                formattedConversation.isonline = otherUser.isonline;\n                formattedConversation.isblocked = otherUser.isblocked;\n            }\n\n            if (conversation.type == MessageDrawerViewConversationContants.CONVERSATION_TYPES.PUBLIC) {\n                formattedConversation.lastsendername = conversation.members.reduce(function(carry, member) {\n                    if (!carry && member.id == lastMessage.useridfrom) {\n                        carry = member.fullname;\n                    }\n                    return carry;\n                }, null);\n            }\n\n            return formattedConversation;\n        });\n\n        return Templates.render(TEMPLATES.CONVERSATIONS_LIST, {conversations: formattedConversations})\n            .then(function(html) {\n                contentContainer.append(html);\n                return html;\n            })\n            .catch(Notification.exception);\n    };\n\n    /**\n     * Build the callback to load conversations.\n     *\n     * @param  {Number} type The conversation type.\n     * @param  {Bool} includeFavourites Include/exclude favourites.\n     * @param  {Number} offset Result offset\n     * @return {Function}\n     */\n    var getLoadCallback = function(type, includeFavourites, offset) {\n        return function(root, userId) {\n            return MessageRepository.getConversations(\n                    userId,\n                    type,\n                    LOAD_LIMIT + 1,\n                    offset,\n                    includeFavourites\n                )\n                .then(function(response) {\n                    var conversations = response.conversations;\n\n                    if (conversations.length > LOAD_LIMIT) {\n                        conversations = conversations.slice(0, -1);\n                    } else {\n                        LazyLoadList.setLoadedAll(root, true);\n                    }\n\n                    offset = offset + LOAD_LIMIT;\n\n                    conversations.forEach(function(conversation) {\n                        loadedConversationsById[conversation.id] = conversation;\n                    });\n\n                    return conversations;\n                })\n                .catch(Notification.exception);\n        };\n    };\n\n    /**\n     * Get the total count container element.\n     *\n     * @param  {Object} root Overview messages container element.\n     * @return {Object} Total count container element.\n     */\n    var getTotalConversationCountElement = function(root) {\n        return root.find(SELECTORS.SECTION_TOTAL_COUNT);\n    };\n\n    /**\n     * Get the unread conversations count container element.\n     *\n     * @param  {Object} root Overview messages container element.\n     * @return {Object} Unread conversations count container element.\n     */\n    var getTotalUnreadConversationCountElement = function(root) {\n        return root.find(SELECTORS.SECTION_UNREAD_COUNT);\n    };\n\n    /**\n     * Increment the total conversations count.\n     *\n     * @param  {Object} root Overview messages container element.\n     */\n    var incrementTotalConversationCount = function(root) {\n        if (loadedTotalCounts) {\n            var element = getTotalConversationCountElement(root);\n            var count = parseInt(element.text());\n            count = count + 1;\n            element.text(count);\n        }\n    };\n\n    /**\n     * Decrement the total conversations count.\n     *\n     * @param  {Object} root Overview messages container element.\n     */\n    var decrementTotalConversationCount = function(root) {\n        if (loadedTotalCounts) {\n            var element = getTotalConversationCountElement(root);\n            var count = parseInt(element.text());\n            count = count - 1;\n            element.text(count);\n        }\n    };\n\n    /**\n     * Decrement the total unread conversations count.\n     *\n     * @param  {Object} root Overview messages container element.\n     */\n    var decrementTotalUnreadConversationCount = function(root) {\n        if (loadedUnreadCounts) {\n            var element = getTotalUnreadConversationCountElement(root);\n            var count = parseInt(element.text());\n            count = count - 1;\n            element.text(count);\n\n            if (count < 1) {\n                element.addClass('hidden');\n            }\n        }\n    };\n\n    /**\n     * Get a contact / conversation element.\n     *\n     * @param  {Object} root Overview messages container element.\n     * @param  {Number} conversationId The conversation id.\n     * @return {Object} Conversation element.\n     */\n    var getConversationElement = function(root, conversationId) {\n        return root.find('[data-conversation-id=\"' + conversationId + '\"]');\n    };\n\n    /**\n     * Get a contact / conversation element from a user id.\n     *\n     * @param  {Object} root Overview messages container element.\n     * @param  {Number} userId The user id.\n     * @return {Object} Conversation element.\n     */\n    var getConversationElementFromUserId = function(root, userId) {\n        return root.find('[data-user-id=\"' + userId + '\"]');\n    };\n\n    /**\n     * Show the contact is blocked icon.\n     *\n     * @param  {Object} conversationElement The conversation element.\n     */\n    var blockContact = function(conversationElement) {\n        conversationElement.find(SELECTORS.BLOCKED_ICON_CONTAINER).removeClass('hidden');\n    };\n\n    /**\n     * Hide the contact is blocked icon.\n     *\n     * @param  {Object} conversationElement The conversation element.\n     */\n    var unblockContact = function(conversationElement) {\n        conversationElement.find(SELECTORS.BLOCKED_ICON_CONTAINER).addClass('hidden');\n    };\n\n    /**\n     * Update the last message from / to a contact.\n     *\n     * @param  {Object} element Conversation element.\n     * @param  {Object} conversation The conversation.\n     * @return {Object} jQuery promise\n     */\n    var updateLastMessage = function(element, conversation) {\n        var message = conversation.messages[conversation.messages.length - 1];\n        var senderString = '';\n        var senderStringRequest;\n        if (message.fromLoggedInUser) {\n            senderStringRequest = {key: 'you', component: 'core_message'};\n        } else {\n            senderStringRequest = {key: 'sender', component: 'core_message', param: message.userFrom.fullname};\n        }\n\n        var stringRequests = [\n            senderStringRequest,\n            {key: 'strftimetime24', component: 'core_langconfig'},\n        ];\n        return Str.get_strings(stringRequests)\n            .then(function(strings) {\n                senderString = strings[0];\n                return UserDate.get([{timestamp: message.timeCreated, format: strings[1]}]);\n            })\n            .then(function(dates) {\n                return dates[0];\n            })\n            .then(function(dateString) {\n                element.find(SELECTORS.LAST_MESSAGE_DATE).text(dateString).removeClass('hidden');\n\n                // No need to show sender string for private conversations and where the last message didn't come from you.\n                if (!message.fromLoggedInUser &&\n                        conversation.type === MessageDrawerViewConversationContants.CONVERSATION_TYPES.PRIVATE) {\n                    senderString = '';\n                }\n\n                // Now load the last message.\n                var lastMessage = senderString + \" <span class='text-muted'>\" + $(message.text).text() + \"</span>\";\n\n                return element.find(SELECTORS.LAST_MESSAGE).html(lastMessage);\n            });\n    };\n\n    /**\n     * Create an render new conversation element in the list of conversations.\n     *\n     * @param  {Object} root Overview messages container element.\n     * @param  {Object} conversation The conversation.\n     * @return {Object} jQuery promise\n     */\n    var createNewConversation = function(root, conversation) {\n        var existingConversations = root.find(SELECTORS.CONVERSATION);\n        var text = '';\n\n        if (!existingConversations.length) {\n            // If we didn't have any conversations then we need to show\n            // the content of the list and hide the empty message.\n            var listRoot = LazyLoadList.getRoot(root);\n            LazyLoadList.showContent(listRoot);\n            LazyLoadList.hideEmptyMessage(listRoot);\n        }\n\n        var messageCount = conversation.messages.length;\n        var lastMessage = messageCount ? conversation.messages[messageCount - 1] : null;\n\n        if (lastMessage) {\n            text = $(lastMessage.text).text() || lastMessage.text;\n        }\n\n        var formattedConversation = {\n            id: conversation.id,\n            name: conversation.name,\n            subname: conversation.subname,\n            lastmessagedate: lastMessage ? lastMessage.timeCreated : null,\n            sentfromcurrentuser: lastMessage ? lastMessage.fromLoggedInUser : null,\n            lastmessage: text,\n            imageurl: conversation.imageUrl,\n        };\n\n        // Cache the conversation.\n        loadedConversationsById[conversation.id] = conversation;\n\n        return Templates.render(TEMPLATES.CONVERSATIONS_LIST, {conversations: [formattedConversation]})\n            .then(function(html) {\n                var contentContainer = LazyLoadList.getContentContainer(root);\n                return contentContainer.prepend(html);\n            })\n            .then(function() {\n                return incrementTotalConversationCount(root);\n            })\n            .catch(Notification.exception);\n    };\n\n    /**\n     * Delete a conversation from the list of conversations.\n     *\n     * @param  {Object} root Overview messages container element.\n     * @param  {Object} conversationElement The conversation element.\n     */\n    var deleteConversation = function(root, conversationElement) {\n        conversationElement.remove();\n        decrementTotalConversationCount(root);\n\n        var conversations = root.find(SELECTORS.CONVERSATION);\n        if (!conversations.length) {\n            // If we don't have any conversations then we need to hide\n            // the content of the list and show the empty message.\n            var listRoot = LazyLoadList.getRoot(root);\n            LazyLoadList.hideContent(listRoot);\n            LazyLoadList.showEmptyMessage(listRoot);\n        }\n    };\n\n    /**\n     * Mark a conversation as read.\n     *\n     * @param  {Object} root Overview messages container element.\n     * @param  {Object} conversationElement The conversation element.\n     */\n    var markConversationAsRead = function(root, conversationElement) {\n        var unreadCount = conversationElement.find(SELECTORS.UNREAD_COUNT);\n        unreadCount.text('0');\n        unreadCount.addClass('hidden');\n        decrementTotalUnreadConversationCount(root);\n    };\n\n    /**\n     * Listen to, and handle events in this section.\n     *\n     * @param {Object} root The section container element.\n     * @param {Function} loadCallback The callback to load items.\n     * @param {Number} type The conversation type for this section\n     * @param {Bool} includeFavourites If this section includes favourites\n     */\n    var registerEventListeners = function(root, loadCallback, type, includeFavourites) {\n        var listRoot = LazyLoadList.getRoot(root);\n\n        // Set the minimum height of the section to the height of the toggle. This\n        // smooths out the collapse animation.\n        var toggle = root.find(SELECTORS.TOGGLE);\n        root.css('min-height', toggle.outerHeight());\n\n        root.on('show.bs.collapse', function() {\n            setExpanded(root);\n            LazyLoadList.show(listRoot, loadCallback, render);\n        });\n\n        root.on('hidden.bs.collapse', function() {\n            setCollapsed(root);\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.CONTACT_BLOCKED, function(userId) {\n            var conversationElement = getConversationElementFromUserId(root, userId);\n            if (conversationElement.length) {\n                blockContact(conversationElement);\n            }\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.CONTACT_UNBLOCKED, function(userId) {\n            var conversationElement = getConversationElementFromUserId(root, userId);\n            if (conversationElement.length) {\n                unblockContact(conversationElement);\n            }\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_NEW_LAST_MESSAGE, function(conversation) {\n            if (\n                (type && conversation.type != type) ||\n                (includeFavourites && !conversation.isFavourite) ||\n                (!includeFavourites && conversation.isFavourite)\n            ) {\n                return;\n            }\n\n            var conversationId = conversation.id;\n            var element = getConversationElement(root, conversationId);\n            if (element.length) {\n                updateLastMessage(element, conversation);\n            } else {\n                createNewConversation(root, conversation);\n            }\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_DELETED, function(conversationId) {\n            var conversationElement = getConversationElement(root, conversationId);\n            if (conversationElement.length) {\n                deleteConversation(root, conversationElement);\n            }\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_READ, function(conversationId) {\n            var conversationElement = getConversationElement(root, conversationId);\n            if (conversationElement.length) {\n                markConversationAsRead(root, conversationElement);\n            }\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_SET_FAVOURITE, function(conversation) {\n            var conversationElement = null;\n            if (includeFavourites && (!type || type == conversation.type)) {\n                conversationElement = getConversationElement(root, conversation.id);\n                if (!conversationElement.length) {\n                    createNewConversation(root, conversation);\n                }\n            } else if (type == conversation.type) {\n                conversationElement = getConversationElement(root, conversation.id);\n                if (conversationElement.length) {\n                    deleteConversation(root, conversationElement);\n                }\n            }\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_UNSET_FAVOURITE, function(conversation) {\n            var conversationElement = null;\n            if (includeFavourites) {\n                conversationElement = getConversationElement(root, conversation.id);\n                if (conversationElement.length) {\n                    deleteConversation(root, conversationElement);\n                }\n            } else if (type == conversation.type) {\n                conversationElement = getConversationElement(root, conversation.id);\n                if (!conversationElement.length) {\n                    createNewConversation(root, conversation);\n                }\n            }\n        });\n\n        CustomEvents.define(root, [CustomEvents.events.activate]);\n        root.on(CustomEvents.events.activate, SELECTORS.CONVERSATION, function(e, data) {\n            var conversationElement = $(e.target).closest(SELECTORS.CONVERSATION);\n            var conversationId = conversationElement.attr('data-conversation-id');\n            var conversation = loadedConversationsById[conversationId];\n            MessageDrawerRouter.go(MessageDrawerRoutes.VIEW_CONVERSATION, conversation);\n\n            data.originalEvent.preventDefault();\n        });\n    };\n\n    /**\n     * Setup the section.\n     *\n     * @param {Object} root The section container element.\n     * @param {Number} type The conversation type for this section\n     * @param {Bool} includeFavourites If this section includes favourites\n     * @param {Object} totalCountPromise Resolves wth the total conversations count\n     * @param {Object} unreadCountPromise Resolves wth the unread conversations count\n     */\n    var show = function(root, type, includeFavourites, totalCountPromise, unreadCountPromise) {\n        root = $(root);\n\n        if (!root.attr('data-init')) {\n            var loadCallback = getLoadCallback(type, includeFavourites, 0);\n            registerEventListeners(root, loadCallback, type, includeFavourites);\n\n            if (isVisible(root)) {\n                setExpanded(root);\n                var listRoot = LazyLoadList.getRoot(root);\n                LazyLoadList.show(listRoot, loadCallback, render);\n            }\n\n            // This is given to us by the calling code because the total counts for all sections\n            // are loaded in a single ajax request rather than one request per section.\n            totalCountPromise.then(function(count) {\n                renderTotalCount(root, count);\n                loadedTotalCounts = true;\n                return;\n            })\n            .catch(function() {\n                // Silently ignore if we can't updated the counts. No need to bother the user.\n            });\n\n            // This is given to us by the calling code because the unread counts for all sections\n            // are loaded in a single ajax request rather than one request per section.\n            unreadCountPromise.then(function(count) {\n                renderUnreadCount(root, count);\n                loadedUnreadCounts = true;\n                return;\n            })\n            .catch(function() {\n                // Silently ignore if we can't updated the counts. No need to bother the user.\n            });\n\n            root.attr('data-init', true);\n        }\n    };\n\n    return {\n        show: show,\n        isVisible: isVisible\n    };\n});\n"],"file":"message_drawer_view_overview_section.es6.js"}