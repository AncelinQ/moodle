{"version":3,"sources":["../src/message_drawer_view_conversation.js"],"names":["define","$","AutoRows","BackOffTimer","CustomEvents","Notification","PubSub","Str","Repository","MessageDrawerEvents","Constants","Patcher","Renderer","StateManager","MessageDrawerRouter","MessageDrawerRoutes","stateCache","viewState","loadedAllMessages","messagesOffset","newMessagesPollTimer","isResetting","isSendingMessage","render","NEWEST_FIRST","NEWEST_MESSAGES_FIRST","LOAD_MESSAGE_LIMIT","INITIAL_NEW_MESSAGE_POLL_TIMEOUT","SELECTORS","CONVERSATION_TYPES","getOtherUserId","type","PRIVATE","loggedInUserId","otherUserIds","Object","keys","members","filter","userId","length","getCachedPrivateConversationIdFromUserId","reduce","carry","id","state","getLoggedInUserProfile","body","parseInt","attr","fullname","profileimageurl","profileimageurlsmall","isonline","showonlinestatus","isblocked","iscontact","isdeleted","canmessage","requirescontact","contactrequests","getMessagesOffset","setMessagesOffset","value","hasLoadedAllMessages","setLoadedAllMessages","getMessagesContainer","find","MESSAGES_CONTAINER","formatConversationForEvent","name","subname","imageUrl","isFavourite","totalMemberCount","messages","map","message","extend","request","loadEmptyPrivateConversation","loggedInUserProfile","otherUserId","newState","setLoadingMembers","setLoadingMessages","then","getMemberInfo","profiles","Error","profile","addMembers","setName","setType","setImageUrl","setTotalMemberCount","catch","error","exception","updateStateFromConversation","conversation","otherUsers","member","otherUser","imageurl","setSubname","membercount","setIsFavourite","isfavourite","addMessages","loadNewConversation","conversationId","messageLimit","messageOffset","newestFirst","getConversation","slice","hasLoggedInUser","concat","markConversationAsRead","loadExistingConversation","messageCount","loadMessages","result","limit","offset","ignoreList","timeFrom","getMessages","indexOf","membersToAdd","getLoadNewMessagesCallback","mostRecentMessage","ignoreMessageIds","i","timeCreated","push","restart","publish","CONVERSATION_NEW_LAST_MESSAGE","Deferred","resolve","promise","markAllConversationMessagesAsRead","markMessagesAsRead","CONVERSATION_READ","requestBlockUser","cancelRequest","addPendingBlockUsersById","blockUser","setLoadingConfirmAction","removePendingBlockUsersById","CONTACT_BLOCKED","requestUnblockUser","addPendingUnblockUsersById","unblockUser","removePendingUnblockUsersById","CONTACT_UNBLOCKED","requestRemoveContact","addPendingRemoveContactsById","removeContact","deleteContacts","removePendingRemoveContactsById","CONTACT_REMOVED","requestAddContact","addPendingAddContactsById","addContact","createContactRequest","response","warnings","removePendingAddContactsById","addContactRequests","setFavourite","setFavouriteConversations","CONVERSATION_SET_FAVOURITE","unsetFavourite","unsetFavouriteConversations","CONVERSATION_UNSET_FAVOURITE","requestDeleteSelectedMessages","selectedMessageIds","addPendingDeleteMessagesById","deleteSelectedMessages","messageIds","pendingDeleteMessageIds","deleteMessages","removeMessagesById","removePendingDeleteMessagesById","removeSelectedMessagesById","prevLastMessage","newLastMessage","CONVERSATION_DELETED","deleteConversation","removeMessages","setPendingDeleteConversation","acceptContactRequest","requests","requesteduserid","removeContactRequests","CONTACT_ADDED","CONTACT_REQUEST_ACCEPTED","declineContactRequest","CONTACT_REQUEST_DECLINED","sendMessage","text","setSendingMessage","newConversationId","sendMessageToUser","conversationid","sendMessageToConversation","setId","resetMessagePollTimer","CONVERSATION_CREATED","toggleSelectMessage","messageId","addSelectedMessagesById","cancelEditMode","generateRenderFunction","header","footer","patch","buildPatch","generateConfirmActionHandler","actionCallback","e","data","loadingConfirmAction","originalEvent","preventDefault","handleSendMessage","target","footerContainer","closest","FOOTER_CONTAINER","textArea","MESSAGE_TEXT_AREA","val","trim","handleViewContact","go","VIEW_CONTACT","handleViewGroupInfo","VIEW_GROUP_INFO","headerActivateHandlers","ACTION_REQUEST_BLOCK","ACTION_REQUEST_UNBLOCK","ACTION_REQUEST_ADD_CONTACT","ACTION_REQUEST_REMOVE_CONTACT","ACTION_REQUEST_DELETE_CONVERSATION","requestDeleteConversation","ACTION_CANCEL_EDIT_MODE","handleCancelEditMode","ACTION_VIEW_CONTACT","ACTION_VIEW_GROUP_INFO","ACTION_CONFIRM_FAVOURITE","handleSetFavourite","ACTION_CONFIRM_UNFAVOURITE","handleUnsetFavourite","bodyActivateHandlers","ACTION_CANCEL_CONFIRM","ACTION_CONFIRM_BLOCK","ACTION_CONFIRM_UNBLOCK","ACTION_CONFIRM_ADD_CONTACT","ACTION_CONFIRM_REMOVE_CONTACT","ACTION_CONFIRM_DELETE_SELECTED_MESSAGES","ACTION_CONFIRM_DELETE_CONVERSATION","ACTION_ACCEPT_CONTACT_REQUEST","ACTION_DECLINE_CONTACT_REQUEST","MESSAGE","handleSelectMessage","selection","window","getSelection","toString","is","element","footerActivateHandlers","SEND_MESSAGE_BUTTON","ACTION_REQUEST_DELETE_SELECTED_MESSAGES","registerEventListeners","isLoadingMoreMessages","messagesContainer","init","events","activate","enter","scrollTop","scrollLock","on","hasMembers","forEach","handler","selector","handlerFunction","enterToSend","subscribe","ROUTE_CHANGED","newRouteData","route","VIEW_CONVERSATION","stop","time","start","resetState","midnight","initialState","buildInitialState","resetNoConversation","getConversationBetweenUsers","resetByConversation","resetById","cache","show","conversationOrId","action","isNaN","isNewConversation","renderPromise","CAN_RECEIVE_FOCUS","first","focus","currentOtherUserId","description","get_string"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls the conversation page in the message drawer.\n *\n * This function handles all of the user actions that the user can take\n * when interacting with the conversation page.\n *\n * It maintains a view state which is a data representation of the view\n * and only operates on that data.\n *\n * The view state is immutable and should never be modified directly. Instead\n * all changes to the view state should be done using the StateManager which\n * will generate a new version of the view state with the requested changes.\n *\n * After any changes to the view state the module will call the render function\n * to ask the renderer to update the UI.\n *\n * General rules for this module:\n * 1.) Never modify viewState directly. All changes should be via the StateManager.\n * 2.) Call render() with the new state when you want to update the UI\n * 3.) Never modify the UI directly in this module. This module is only concerned\n *     with the data in the view state.\n *\n * The general flow for a user interaction will be something like:\n * User interaction: User clicks \"confirm block\" button to block the other user\n *      1.) This module is hears the click\n *      2.) This module sends a request to the server to block the user\n *      3.) The server responds with the new user profile\n *      4.) This module generates a new state using the StateManager with the updated\n *          user profile.\n *      5.) This module asks the Patcher to generate a patch from the current state and\n *          the newly generated state. This patch tells the renderer what has changed\n *          between the states.\n *      6.) This module gives the Renderer the generated patch. The renderer updates\n *          the UI with changes according to the patch.\n *\n * @module     core_message/message_drawer_view_conversation\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(\n[\n    'jquery',\n    'core/auto_rows',\n    'core/backoff_timer',\n    'core/custom_interaction_events',\n    'core/notification',\n    'core/pubsub',\n    'core/str',\n    'core_message/message_repository',\n    'core_message/message_drawer_events',\n    'core_message/message_drawer_view_conversation_constants',\n    'core_message/message_drawer_view_conversation_patcher',\n    'core_message/message_drawer_view_conversation_renderer',\n    'core_message/message_drawer_view_conversation_state_manager',\n    'core_message/message_drawer_router',\n    'core_message/message_drawer_routes',\n],\nfunction(\n    $,\n    AutoRows,\n    BackOffTimer,\n    CustomEvents,\n    Notification,\n    PubSub,\n    Str,\n    Repository,\n    MessageDrawerEvents,\n    Constants,\n    Patcher,\n    Renderer,\n    StateManager,\n    MessageDrawerRouter,\n    MessageDrawerRoutes\n) {\n\n    // Contains a cache of all view states that have been loaded so far\n    // which saves us having to reload stuff with network requests when\n    // switching between conversations.\n    var stateCache = {};\n    // The current data representation of the view.\n    var viewState = null;\n    var loadedAllMessages = false;\n    var messagesOffset = 0;\n    var newMessagesPollTimer = null;\n    // If the UI is currently resetting.\n    var isResetting = true;\n    // If the UI is currently sending a message.\n    var isSendingMessage = false;\n    // This is the render function which will be generated when this module is\n    // first called. See generateRenderFunction for details.\n    var render = null;\n\n    var NEWEST_FIRST = Constants.NEWEST_MESSAGES_FIRST;\n    var LOAD_MESSAGE_LIMIT = Constants.LOAD_MESSAGE_LIMIT;\n    var INITIAL_NEW_MESSAGE_POLL_TIMEOUT = Constants.INITIAL_NEW_MESSAGE_POLL_TIMEOUT;\n    var SELECTORS = Constants.SELECTORS;\n    var CONVERSATION_TYPES = Constants.CONVERSATION_TYPES;\n\n    /**\n     * Get the other user userid.\n     *\n     * @return {Number} Userid.\n     */\n    var getOtherUserId = function() {\n        if (!viewState || viewState.type != CONVERSATION_TYPES.PRIVATE) {\n            return null;\n        }\n\n        var loggedInUserId = viewState.loggedInUserId;\n        var otherUserIds = Object.keys(viewState.members).filter(function(userId) {\n            return loggedInUserId != userId;\n        });\n\n        return otherUserIds.length ? otherUserIds[0] : null;\n    };\n\n    /**\n     * Search the cache to see if we've already loaded a private conversation\n     * with the given user id.\n     *\n     * @param {Number} userId The id of the other user.\n     * @return {Number|null} Conversation id.\n     */\n    var getCachedPrivateConversationIdFromUserId = function(userId) {\n        return Object.keys(stateCache).reduce(function(carry, id) {\n            if (!carry) {\n                var state = stateCache[id].state;\n\n                if (state.type == CONVERSATION_TYPES.PRIVATE) {\n                    if (userId in state.members) {\n                        // We've found a cached conversation for this user!\n                        carry = state.id;\n                    }\n                }\n            }\n\n            return carry;\n        }, null);\n    };\n\n    /**\n     * Get profile info for logged in user.\n     *\n     * @param {Object} body Conversation body container element.\n     * @return {Object}\n     */\n    var getLoggedInUserProfile = function(body) {\n        return {\n            id: parseInt(body.attr('data-user-id'), 10),\n            fullname: null,\n            profileimageurl: null,\n            profileimageurlsmall: null,\n            isonline:  null,\n            showonlinestatus: null,\n            isblocked: null,\n            iscontact: null,\n            isdeleted: null,\n            canmessage:  null,\n            requirescontact: null,\n            contactrequests: []\n        };\n    };\n\n    /**\n     * Get the messages offset value to load more messages.\n     *\n     * @return {Number}\n     */\n    var getMessagesOffset = function() {\n        return messagesOffset;\n    };\n\n    /**\n     * Set the messages offset value for loading more messages.\n     *\n     * @param {Number} value The offset value\n     */\n    var setMessagesOffset = function(value) {\n        messagesOffset = value;\n        stateCache[viewState.id].messagesOffset = value;\n    };\n\n    /**\n     * Check if all messages have been loaded.\n     *\n     * @return {Bool}\n     */\n    var hasLoadedAllMessages = function() {\n        return loadedAllMessages;\n    };\n\n    /**\n     * Set whether all messages have been loaded or not.\n     *\n     * @param {Bool} value If all messages have been loaded.\n     */\n    var setLoadedAllMessages = function(value) {\n        loadedAllMessages = value;\n        stateCache[viewState.id].loadedAllMessages = value;\n    };\n\n    /**\n     * Get the messages container element.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @return {Object} The messages container element.\n     */\n    var getMessagesContainer = function(body) {\n        return body.find(SELECTORS.MESSAGES_CONTAINER);\n    };\n\n    /**\n     * Reformat the conversation for an event payload.\n     *\n     * @param  {Object} state The view state.\n     * @return {Object} New formatted conversation.\n     */\n    var formatConversationForEvent = function(state) {\n        return {\n            id: state.id,\n            name: state.name,\n            subname: state.subname,\n            imageUrl: state.imageUrl,\n            isFavourite: state.isFavourite,\n            type: state.type,\n            totalMemberCount: state.totalMemberCount,\n            loggedInUserId: state.loggedInUserId,\n            messages: state.messages.map(function(message) {\n                return $.extend({}, message);\n            }),\n            members: Object.keys(state.members).reduce(function(carry, id) {\n                carry[id] = $.extend({}, state.members[id]);\n                carry[id].contactrequests = state.members[id].contactrequests.map(function(request) {\n                    return $.extend({}, request);\n                });\n                return carry;\n            }, {})\n        };\n    };\n\n    /**\n     * Load up an empty private conversation between the logged in user and the\n     * other user. Sets all of the conversation details based on the other user.\n     *\n     * A conversation isn't created until the user sends the first message.\n     *\n     * @param  {Object} loggedInUserProfile The logged in user profile.\n     * @param  {Number} otherUserId The other user id.\n     * @return {Object} Profile returned from repository.\n     */\n    var loadEmptyPrivateConversation = function(loggedInUserProfile, otherUserId) {\n        var loggedInUserId = loggedInUserProfile.id;\n        var newState = StateManager.setLoadingMembers(viewState, true);\n        newState = StateManager.setLoadingMessages(newState, true);\n        return render(newState)\n            .then(function() {\n                return Repository.getMemberInfo(loggedInUserId, [otherUserId], true, true);\n            })\n            .then(function(profiles) {\n                if (profiles.length) {\n                    return profiles[0];\n                } else {\n                    throw new Error('Unable to load other user profile');\n                }\n            })\n            .then(function(profile) {\n                var newState = StateManager.addMembers(viewState, [profile, loggedInUserProfile]);\n                newState = StateManager.setLoadingMembers(newState, false);\n                newState = StateManager.setLoadingMessages(newState, false);\n                newState = StateManager.setName(newState, profile.fullname);\n                newState = StateManager.setType(newState, 1);\n                newState = StateManager.setImageUrl(newState, profile.profileimageurl);\n                newState = StateManager.setTotalMemberCount(newState, 2);\n                return render(newState)\n                    .then(function() {\n                        return profile;\n                    });\n            })\n            .catch(function(error) {\n                var newState = StateManager.setLoadingMembers(viewState, false);\n                render(newState);\n                Notification.exception(error);\n            });\n    };\n\n    /**\n     * Create a new state from a conversation object.\n     *\n     * @param {Object} conversation The conversation object.\n     * @param {Number} loggedInUserId The logged in user id.\n     * @return {Object} new state.\n     */\n    var updateStateFromConversation = function(conversation, loggedInUserId) {\n        var otherUsers = conversation.members.filter(function(member) {\n            return member.id != loggedInUserId;\n        });\n        var otherUser = otherUsers.length ? otherUsers[0] : null;\n        var name = conversation.name;\n        var imageUrl = conversation.imageurl;\n\n        if (conversation.type == CONVERSATION_TYPES.PRIVATE) {\n            name = name || otherUser ? otherUser.fullname : '';\n            imageUrl = imageUrl || otherUser ? otherUser.profileimageurl : '';\n        }\n\n        var newState = StateManager.addMembers(viewState, conversation.members);\n        newState = StateManager.setName(newState, name);\n        newState = StateManager.setSubname(newState, conversation.subname);\n        newState = StateManager.setType(newState, conversation.type);\n        newState = StateManager.setImageUrl(newState, imageUrl);\n        newState = StateManager.setTotalMemberCount(newState, conversation.membercount);\n        newState = StateManager.setIsFavourite(newState, conversation.isfavourite);\n        newState = StateManager.addMessages(newState, conversation.messages);\n        return newState;\n    };\n\n    /**\n     * Get the details for a conversation from the conversation id.\n     *\n     * @param  {Number} conversationId The conversation id.\n     * @param  {Object} loggedInUserProfile The logged in user profile.\n     * @param  {Number} messageLimit The number of messages to include.\n     * @param  {Number} messageOffset The number of messages to skip.\n     * @param  {Bool} newestFirst Order messages newest first.\n     * @return {Object} Promise resolved when loaded.\n     */\n    var loadNewConversation = function(\n        conversationId,\n        loggedInUserProfile,\n        messageLimit,\n        messageOffset,\n        newestFirst\n    ) {\n        var loggedInUserId = loggedInUserProfile.id;\n        var newState = StateManager.setLoadingMembers(viewState, true);\n        newState = StateManager.setLoadingMessages(newState, true);\n        return render(newState)\n            .then(function() {\n                return Repository.getConversation(\n                    loggedInUserId,\n                    conversationId,\n                    true,\n                    true,\n                    0,\n                    0,\n                    messageLimit + 1,\n                    messageOffset,\n                    newestFirst\n                );\n            })\n            .then(function(conversation) {\n                if (conversation.messages.length > messageLimit) {\n                    conversation.messages = conversation.messages.slice(1);\n                } else {\n                    setLoadedAllMessages(true);\n                }\n\n                setMessagesOffset(messageOffset + messageLimit);\n\n                return conversation;\n            })\n            .then(function(conversation) {\n                var hasLoggedInUser = conversation.members.filter(function(member) {\n                    return member.id == loggedInUserProfile.id;\n                });\n\n                if (hasLoggedInUser.length < 1) {\n                    conversation.members = conversation.members.concat([loggedInUserProfile]);\n                }\n\n                var newState = updateStateFromConversation(conversation, loggedInUserProfile.id);\n                newState = StateManager.setLoadingMembers(newState, false);\n                newState = StateManager.setLoadingMessages(newState, false);\n                return render(newState)\n                    .then(function() {\n                        return conversation;\n                    });\n            })\n            .then(function() {\n                return markConversationAsRead(conversationId);\n            })\n            .catch(function(error) {\n                var newState = StateManager.setLoadingMembers(viewState, false);\n                newState = StateManager.setLoadingMessages(newState, false);\n                render(newState);\n                Notification.exception(error);\n            });\n    };\n\n    /**\n     * Get the details for a conversation from and existing conversation object.\n     *\n     * @param  {Object} conversation The conversation object.\n     * @param  {Object} loggedInUserProfile The logged in user profile.\n     * @param  {Number} messageLimit The number of messages to include.\n     * @param  {Bool} newestFirst Order messages newest first.\n     * @return {Object} Promise resolved when loaded.\n     */\n    var loadExistingConversation = function(\n        conversation,\n        loggedInUserProfile,\n        messageLimit,\n        newestFirst\n    ) {\n        var hasLoggedInUser = conversation.members.filter(function(member) {\n            return member.id == loggedInUserProfile.id;\n        });\n\n        if (hasLoggedInUser.length < 1) {\n            conversation.members = conversation.members.concat([loggedInUserProfile]);\n        }\n\n        var newState = updateStateFromConversation(conversation, loggedInUserProfile.id);\n        newState = StateManager.setLoadingMembers(newState, false);\n        newState = StateManager.setLoadingMessages(newState, true);\n        var messageCount = conversation.messages.length;\n        return render(newState)\n            .then(function() {\n                if (messageCount < messageLimit) {\n                    // We haven't got enough messages so let's load some more.\n                    return loadMessages(conversation.id, messageLimit, messageCount, newestFirst, [])\n                        .then(function(result) {\n                            // Give the list of messages to the next handler.\n                            return result.messages;\n                        });\n                } else {\n                    // We've got enough messages. No need to load any more for now.\n                    var newState = StateManager.setLoadingMessages(viewState, false);\n                    return render(newState)\n                        .then(function() {\n                            // Give the list of messages to the next handler.\n                            return conversation.messages;\n                        });\n                }\n            })\n            .then(function(messages) {\n                // Update the offset to reflect the number of messages we've loaded.\n                setMessagesOffset(messages.length);\n                return messages;\n            })\n            .then(function() {\n                return markConversationAsRead(conversation.id);\n            })\n            .catch(Notification.exception);\n    };\n\n    /**\n     * Load messages for this conversation and pass them to the renderer.\n     *\n     * @param  {Number} conversationId Conversation id.\n     * @param  {Number} limit Number of messages to load.\n     * @param  {Number} offset Get messages from offset.\n     * @param  {Bool} newestFirst Get newest messages first.\n     * @param  {Array} ignoreList Ignore any messages with ids in this list.\n     * @param  {Number|null} timeFrom Only get messages from this time onwards.\n     * @return {Promise} renderer promise.\n     */\n    var loadMessages = function(conversationId, limit, offset, newestFirst, ignoreList, timeFrom) {\n        return Repository.getMessages(\n                viewState.loggedInUserId,\n                conversationId,\n                limit ? limit + 1 : limit,\n                offset,\n                newestFirst,\n                timeFrom\n            )\n            .then(function(result) {\n                if (result.messages.length && ignoreList.length) {\n                    result.messages = result.messages.filter(function(message) {\n                        // Skip any messages in our ignore list.\n                        return ignoreList.indexOf(parseInt(message.id, 10)) < 0;\n                    });\n                }\n\n                return result;\n            })\n            .then(function(result) {\n                if (!limit) {\n                    return result;\n                } else if (result.messages.length > limit) {\n                    // Ignore the last result which was just to test if there are more\n                    // to load.\n                    result.messages = result.messages.slice(0, -1);\n                } else {\n                    setLoadedAllMessages(true);\n                }\n\n                return result;\n            })\n            .then(function(result) {\n                var membersToAdd = result.members.filter(function(member) {\n                    return !(member.id in viewState.members);\n                });\n                var newState = StateManager.addMembers(viewState, membersToAdd);\n                newState = StateManager.addMessages(newState, result.messages);\n                newState = StateManager.setLoadingMessages(newState, false);\n                return render(newState)\n                    .then(function() {\n                        return result;\n                    });\n            })\n            .catch(function(error) {\n                var newState = StateManager.setLoadingMessages(viewState, false);\n                render(newState);\n                // Re-throw the error for other error handlers.\n                throw error;\n            });\n    };\n\n    /**\n     * Create a callback function for getting new messages for this conversation.\n     *\n     * @param  {Number} conversationId Conversation id.\n     * @param  {Bool} newestFirst Show newest messages first\n     * @return {Function} Callback function that returns a renderer promise.\n     */\n    var getLoadNewMessagesCallback = function(conversationId, newestFirst) {\n        return function() {\n            var messages = viewState.messages;\n            var mostRecentMessage = messages.length ? messages[messages.length - 1] : null;\n\n            if (mostRecentMessage && !isResetting && !isSendingMessage) {\n                // There may be multiple messages with the same time created value since\n                // the accuracy is only down to the second. The server will include these\n                // messages in the result (since it does a >= comparison on time from) so\n                // we need to filter them back out of the result so that we're left only\n                // with the new messages.\n                var ignoreMessageIds = [];\n                for (var i = messages.length - 1; i >= 0; i--) {\n                    var message = messages[i];\n                    if (message.timeCreated === mostRecentMessage.timeCreated) {\n                        ignoreMessageIds.push(message.id);\n                    } else {\n                        // Since the messages are ordered in ascending order of time created\n                        // we can break as soon as we hit a message with a different time created\n                        // because we know all other messages will have lower values.\n                        break;\n                    }\n                }\n\n                return loadMessages(\n                        conversationId,\n                        0,\n                        0,\n                        newestFirst,\n                        ignoreMessageIds,\n                        mostRecentMessage.timeCreated\n                    )\n                    .then(function(result) {\n                        if (result.messages.length) {\n                            // If we found some results then restart the polling timer\n                            // because the other user might be sending messages.\n                            newMessagesPollTimer.restart();\n                            // We've also got a new last message so publish that for other\n                            // components to update.\n                            var conversation = formatConversationForEvent(viewState);\n                            PubSub.publish(MessageDrawerEvents.CONVERSATION_NEW_LAST_MESSAGE, conversation);\n                            return markConversationAsRead(conversationId);\n                        } else {\n                            return result;\n                        }\n                    });\n            }\n\n            return $.Deferred().resolve().promise();\n        };\n    };\n\n    /**\n     * Mark a conversation as read.\n     *\n     * @param  {Number} conversationId The conversation id.\n     * @return {Promise} The renderer promise.\n     */\n    var markConversationAsRead = function(conversationId) {\n        var loggedInUserId = viewState.loggedInUserId;\n\n        return Repository.markAllConversationMessagesAsRead(loggedInUserId, conversationId)\n            .then(function() {\n                var newState = StateManager.markMessagesAsRead(viewState, viewState.messages);\n                PubSub.publish(MessageDrawerEvents.CONVERSATION_READ, conversationId);\n                return render(newState);\n            });\n    };\n\n    /**\n     * Tell the statemanager there is request to block a user and run the renderer\n     * to show the block user dialogue.\n     *\n     * @param  {Number} userId User id.\n     * @return {Promise} Renderer promise.\n     */\n    var requestBlockUser = function(userId) {\n        return cancelRequest(userId).then(function() {\n            var newState = StateManager.addPendingBlockUsersById(viewState, [userId]);\n            return render(newState);\n        });\n    };\n\n    /**\n     * Send the repository a request to block a user, update the statemanager and publish\n     * a contact has been blocked.\n     *\n     * @param  {Number} userId User id of user to block.\n     * @return {Promise} Renderer promise.\n     */\n    var blockUser = function(userId) {\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        return render(newState)\n            .then(function() {\n                return Repository.blockUser(viewState.loggedInUserId, userId);\n            })\n            .then(function(profile) {\n                var newState = StateManager.addMembers(viewState, [profile]);\n                newState = StateManager.removePendingBlockUsersById(newState, [userId]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                PubSub.publish(MessageDrawerEvents.CONTACT_BLOCKED, userId);\n                return render(newState);\n            });\n    };\n\n    /**\n     * Tell the statemanager there is a request to unblock a user and run the renderer\n     * to show the unblock user dialogue.\n     *\n     * @param  {Number} userId User id of user to unblock.\n     * @return {Promise} Renderer promise.\n     */\n    var requestUnblockUser = function(userId) {\n        return cancelRequest(userId).then(function() {\n            var newState = StateManager.addPendingUnblockUsersById(viewState, [userId]);\n            return render(newState);\n        });\n    };\n\n    /**\n     * Send the repository a request to unblock a user, update the statemanager and publish\n     * a contact has been unblocked.\n     *\n     * @param  {Number} userId User id of user to unblock.\n     * @return {Promise} Renderer promise.\n     */\n    var unblockUser = function(userId) {\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        return render(newState)\n            .then(function() {\n                return Repository.unblockUser(viewState.loggedInUserId, userId);\n            })\n            .then(function(profile) {\n                var newState = StateManager.addMembers(viewState, [profile]);\n                newState = StateManager.removePendingUnblockUsersById(newState, [userId]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                PubSub.publish(MessageDrawerEvents.CONTACT_UNBLOCKED, userId);\n                return render(newState);\n            });\n    };\n\n    /**\n     * Tell the statemanager there is a request to remove a user from the contact list\n     * and run the renderer to show the remove user from contacts dialogue.\n     *\n     * @param  {Number} userId User id of user to remove from contacts.\n     * @return {Promise} Renderer promise.\n     */\n    var requestRemoveContact = function(userId) {\n        return cancelRequest(userId).then(function() {\n            var newState = StateManager.addPendingRemoveContactsById(viewState, [userId]);\n            return render(newState);\n        });\n    };\n\n    /**\n     * Send the repository a request to remove a user from the contacts list. update the statemanager\n     * and publish a contact has been removed.\n     *\n     * @param  {Number} userId User id of user to remove from contacts.\n     * @return {Promise} Renderer promise.\n     */\n    var removeContact = function(userId) {\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        return render(newState)\n            .then(function() {\n                return Repository.deleteContacts(viewState.loggedInUserId, [userId]);\n            })\n            .then(function(profiles) {\n                var newState = StateManager.addMembers(viewState, profiles);\n                newState = StateManager.removePendingRemoveContactsById(newState, [userId]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                PubSub.publish(MessageDrawerEvents.CONTACT_REMOVED, userId);\n                return render(newState);\n            });\n    };\n\n    /**\n     * Tell the statemanager there is a request to add a user to the contact list\n     * and run the renderer to show the add user to contacts dialogue.\n     *\n     * @param  {Number} userId User id of user to add to contacts.\n     * @return {Promise} Renderer promise.\n     */\n    var requestAddContact = function(userId) {\n        return cancelRequest(userId).then(function() {\n            var newState = StateManager.addPendingAddContactsById(viewState, [userId]);\n            return render(newState);\n        });\n    };\n\n    /**\n     * Send the repository a request to add a user to the contacts list. update the statemanager\n     * and publish a contact has been added.\n     *\n     * @param  {Number} userId User id of user to add to contacts.\n     * @return {Promise} Renderer promise.\n     */\n    var addContact = function(userId) {\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        return render(newState)\n            .then(function() {\n                return Repository.createContactRequest(viewState.loggedInUserId, userId);\n            })\n            .then(function(response) {\n                if (!response.request) {\n                    throw new Error(response.warnings[0].message);\n                }\n\n                return response.request;\n            })\n            .then(function(request) {\n                var newState = StateManager.removePendingAddContactsById(viewState, [userId]);\n                newState = StateManager.addContactRequests(newState, [request]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                return render(newState);\n            });\n    };\n\n    /**\n     * Set the current conversation as a favourite conversation.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var setFavourite = function() {\n        var userId = viewState.loggedInUserId;\n        var conversationId = viewState.id;\n\n        return Repository.setFavouriteConversations(userId, [conversationId])\n            .then(function() {\n                var newState = StateManager.setIsFavourite(viewState, true);\n                return render(newState);\n            })\n            .then(function() {\n                return PubSub.publish(\n                    MessageDrawerEvents.CONVERSATION_SET_FAVOURITE,\n                    formatConversationForEvent(viewState)\n                );\n            });\n    };\n\n    /**\n     * Unset the current conversation as a favourite conversation.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var unsetFavourite = function() {\n        var userId = viewState.loggedInUserId;\n        var conversationId = viewState.id;\n\n        return Repository.unsetFavouriteConversations(userId, [conversationId])\n            .then(function() {\n                var newState = StateManager.setIsFavourite(viewState, false);\n                return render(newState);\n            })\n            .then(function() {\n                return PubSub.publish(\n                    MessageDrawerEvents.CONVERSATION_UNSET_FAVOURITE,\n                    formatConversationForEvent(viewState)\n                );\n            });\n    };\n\n    /**\n     * Tell the statemanager there is a request to delete the selected messages\n     * and run the renderer to show confirm delete messages dialogue.\n     *\n     * @param  {Number} userId User id.\n     * @return {Promise} Renderer promise.\n     */\n    var requestDeleteSelectedMessages = function(userId) {\n        var selectedMessageIds = viewState.selectedMessageIds;\n        return cancelRequest(userId).then(function() {\n            var newState = StateManager.addPendingDeleteMessagesById(viewState, selectedMessageIds);\n            return render(newState);\n        });\n    };\n\n    /**\n     * Send the repository a request to delete the messages pending deletion. Update the statemanager\n     * and publish a message deletion event.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var deleteSelectedMessages = function() {\n        var messageIds = viewState.pendingDeleteMessageIds;\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        return render(newState)\n            .then(function() {\n                return Repository.deleteMessages(viewState.loggedInUserId, messageIds);\n            })\n            .then(function() {\n                var newState = StateManager.removeMessagesById(viewState, messageIds);\n                newState = StateManager.removePendingDeleteMessagesById(newState, messageIds);\n                newState = StateManager.removeSelectedMessagesById(newState, messageIds);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n\n                var prevLastMessage = viewState.messages[viewState.messages.length - 1];\n                var newLastMessage = newState.messages.length ? newState.messages[newState.messages.length - 1] : null;\n\n                if (newLastMessage && newLastMessage.id != prevLastMessage.id) {\n                    var conversation = formatConversationForEvent(newState);\n                    PubSub.publish(MessageDrawerEvents.CONVERSATION_NEW_LAST_MESSAGE, conversation);\n                } else if (!newState.messages.length) {\n                    PubSub.publish(MessageDrawerEvents.CONVERSATION_DELETED, newState.id);\n                }\n\n                return render(newState);\n            });\n    };\n\n    /**\n     * Tell the statemanager there is a request to delete a conversation\n     * and run the renderer to show confirm delete conversation dialogue.\n     *\n     * @param  {Number} userId User id of other user.\n     * @return {Promise} Renderer promise.\n     */\n    var requestDeleteConversation = function(userId) {\n        return cancelRequest(userId).then(function() {\n            var newState = StateManager.setPendingDeleteConversation(viewState, true);\n            return render(newState);\n        });\n    };\n\n    /**\n     * Send the repository a request to delete a conversation. Update the statemanager\n     * and publish a conversation deleted event.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var deleteConversation = function() {\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        return render(newState)\n            .then(function() {\n                return Repository.deleteConversation(viewState.loggedInUserId, viewState.id);\n            })\n            .then(function() {\n                var newState = StateManager.removeMessages(viewState, viewState.messages);\n                newState = StateManager.removeSelectedMessagesById(newState, viewState.selectedMessageIds);\n                newState = StateManager.setPendingDeleteConversation(newState, false);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                PubSub.publish(MessageDrawerEvents.CONVERSATION_DELETED, newState.id);\n                return render(newState);\n            });\n    };\n\n    /**\n     * Tell the statemanager to cancel all pending actions.\n     *\n     * @param  {Number} userId User id.\n     * @return {Promise} Renderer promise.\n     */\n    var cancelRequest = function(userId) {\n        var pendingDeleteMessageIds = viewState.pendingDeleteMessageIds;\n        var newState = StateManager.removePendingAddContactsById(viewState, [userId]);\n        newState = StateManager.removePendingRemoveContactsById(newState, [userId]);\n        newState = StateManager.removePendingUnblockUsersById(newState, [userId]);\n        newState = StateManager.removePendingBlockUsersById(newState, [userId]);\n        newState = StateManager.removePendingDeleteMessagesById(newState, pendingDeleteMessageIds);\n        newState = StateManager.setPendingDeleteConversation(newState, false);\n        return render(newState);\n    };\n\n    /**\n     * Accept the contact request from the given user.\n     *\n     * @param  {Number} userId User id of other user.\n     * @return {Promise} Renderer promise.\n     */\n    var acceptContactRequest = function(userId) {\n        // Search the list of the logged in user's contact requests to find the\n        // one from this user.\n        var loggedInUserId = viewState.loggedInUserId;\n        var requests = viewState.members[userId].contactrequests.filter(function(request) {\n            return request.requesteduserid == loggedInUserId;\n        });\n        var request = requests[0];\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        return render(newState)\n            .then(function() {\n                return Repository.acceptContactRequest(userId, loggedInUserId);\n            })\n            .then(function(profile) {\n                var newState = StateManager.removeContactRequests(viewState, [request]);\n                newState = StateManager.addMembers(viewState, [profile]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                return render(newState);\n            })\n            .then(function() {\n                PubSub.publish(MessageDrawerEvents.CONTACT_ADDED, viewState.members[userId]);\n                PubSub.publish(MessageDrawerEvents.CONTACT_REQUEST_ACCEPTED, request);\n                return;\n            });\n    };\n\n    /**\n     * Decline the contact request from the given user.\n     *\n     * @param  {Number} userId User id of other user.\n     * @return {Promise} Renderer promise.\n     */\n    var declineContactRequest = function(userId) {\n        // Search the list of the logged in user's contact requests to find the\n        // one from this user.\n        var loggedInUserId = viewState.loggedInUserId;\n        var requests = viewState.members[userId].contactrequests.filter(function(request) {\n            return request.requesteduserid == loggedInUserId;\n        });\n        var request = requests[0];\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        return render(newState)\n            .then(function() {\n                return Repository.declineContactRequest(userId, loggedInUserId);\n            })\n            .then(function(profile) {\n                var newState = StateManager.removeContactRequests(viewState, [request]);\n                newState = StateManager.addMembers(viewState, [profile]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                return render(newState);\n            })\n            .then(function() {\n                PubSub.publish(MessageDrawerEvents.CONTACT_REQUEST_DECLINED, request);\n                return;\n            });\n    };\n\n    /**\n     * Send a message to the repository, update the statemanager publish a message send event\n     * and call the renderer.\n     *\n     * @param  {Number} conversationId The conversation to send to.\n     * @param  {String} text Text to send.\n     * @return {Promise} Renderer promise.\n     */\n    var sendMessage = function(conversationId, text) {\n        isSendingMessage = true;\n        var newState = StateManager.setSendingMessage(viewState, true);\n        var newConversationId = null;\n        return render(newState)\n            .then(function() {\n                if (!conversationId && viewState.type == CONVERSATION_TYPES.PRIVATE) {\n                    // If it's a new private conversation then we need to use the old\n                    // web service function to create the conversation.\n                    var otherUserId = getOtherUserId();\n                    return Repository.sendMessageToUser(otherUserId, text)\n                        .then(function(message) {\n                            newConversationId = parseInt(message.conversationid, 10);\n                            return message;\n                        });\n                } else {\n                    return Repository.sendMessageToConversation(conversationId, text);\n                }\n            })\n            .then(function(message) {\n                var newState = StateManager.addMessages(viewState, [message]);\n                newState = StateManager.setSendingMessage(newState, false);\n                var conversation = formatConversationForEvent(newState);\n\n                if (!newState.id) {\n                    // If this message created the conversation then save the conversation\n                    // id.\n                    newState = StateManager.setId(newState, newConversationId);\n                    conversation.id = newConversationId;\n                    resetMessagePollTimer(newConversationId);\n                    PubSub.publish(MessageDrawerEvents.CONVERSATION_CREATED, conversation);\n                }\n\n                return render(newState)\n                    .then(function() {\n                        isSendingMessage = false;\n                        PubSub.publish(MessageDrawerEvents.CONVERSATION_NEW_LAST_MESSAGE, conversation);\n                        return;\n                    });\n            })\n            .catch(function(error) {\n                isSendingMessage = false;\n                var newState = StateManager.setSendingMessage(viewState, false);\n                render(newState);\n                Notification.exception(error);\n            });\n    };\n\n    /**\n     * Toggle the selected messages update the statemanager and render the result.\n     *\n     * @param  {Number} messageId The id of the message to be toggled\n     * @return {Promise} Renderer promise.\n     */\n    var toggleSelectMessage = function(messageId) {\n        var newState = viewState;\n\n        if (viewState.selectedMessageIds.indexOf(messageId) > -1) {\n            newState = StateManager.removeSelectedMessagesById(viewState, [messageId]);\n        } else {\n            newState = StateManager.addSelectedMessagesById(viewState, [messageId]);\n        }\n\n        return render(newState);\n    };\n\n    /**\n     * Cancel edit mode (selecting the messages).\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var cancelEditMode = function() {\n        return cancelRequest(getOtherUserId())\n            .then(function() {\n                var newState = StateManager.removeSelectedMessagesById(viewState, viewState.selectedMessageIds);\n                return render(newState);\n            });\n    };\n\n    /**\n     * Create a function to render the Conversation.\n     *\n     * @param  {Object} header The conversation header container element.\n     * @param  {Object} body The conversation body container element.\n     * @param  {Object} footer The conversation footer container element.\n     * @return {Promise} Renderer promise.\n     */\n    var generateRenderFunction = function(header, body, footer) {\n        return function(newState) {\n            var patch = Patcher.buildPatch(viewState, newState);\n            // This is a great place to add in some console logging if you need\n            // to debug something. You can log the current state, the next state,\n            // and the generated patch and see exactly what will be updated.\n            return Renderer.render(header, body, footer, patch)\n                .then(function() {\n                    viewState = newState;\n                    if (newState.id) {\n                        // Only cache created conversations.\n                        stateCache[newState.id] = {\n                            state: newState,\n                            messagesOffset: getMessagesOffset(),\n                            loadedAllMessages: hasLoadedAllMessages()\n                        };\n                    }\n                    return;\n                });\n        };\n    };\n\n    /**\n     * Create a confirm action function.\n     *\n     * @param {Function} actionCallback The callback function.\n     * @return {Function} Confirm action handler.\n     */\n    var generateConfirmActionHandler = function(actionCallback) {\n        return function(e, data) {\n            if (!viewState.loadingConfirmAction) {\n                actionCallback(getOtherUserId())\n                    .catch(function(error) {\n                        var newState = StateManager.setLoadingConfirmAction(viewState, false);\n                        render(newState);\n                        Notification.exception(error);\n                    });\n            }\n            data.originalEvent.preventDefault();\n        };\n    };\n\n    /**\n     * Send message event handler.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleSendMessage = function(e, data) {\n        var target = $(e.target);\n        var footerContainer = target.closest(SELECTORS.FOOTER_CONTAINER);\n        var textArea = footerContainer.find(SELECTORS.MESSAGE_TEXT_AREA);\n        var text = textArea.val().trim();\n\n        if (text !== '') {\n            sendMessage(viewState.id, text);\n        }\n\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Select message event handler.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleSelectMessage = function(e, data) {\n        var selection = window.getSelection();\n        var target = $(e.target);\n\n        if (selection.toString() != '') {\n            // Bail if we're selecting.\n            return;\n        }\n\n        if (target.is('a')) {\n            // Clicking on a link in the message so ignore it.\n            return;\n        }\n\n        var element = target.closest(SELECTORS.MESSAGE);\n        var messageId = parseInt(element.attr('data-message-id'), 10);\n\n        toggleSelectMessage(messageId).catch(Notification.exception);\n\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Cancel edit mode event handler.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleCancelEditMode = function(e, data) {\n        cancelEditMode().catch(Notification.exception);\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Show the view contact page.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleViewContact = function(e, data) {\n        var otherUserId = getOtherUserId();\n        var otherUser = viewState.members[otherUserId];\n        MessageDrawerRouter.go(MessageDrawerRoutes.VIEW_CONTACT, otherUser);\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Set this conversation as a favourite.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleSetFavourite = function(e, data) {\n        setFavourite().catch(Notification.exception);\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Unset this conversation as a favourite.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleUnsetFavourite = function(e, data) {\n        unsetFavourite().catch(Notification.exception);\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Show the view contact page.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleViewGroupInfo = function(e, data) {\n        MessageDrawerRouter.go(\n            MessageDrawerRoutes.VIEW_GROUP_INFO,\n            {\n                id: viewState.id,\n                name: viewState.name,\n                subname: viewState.subname,\n                imageUrl: viewState.imageUrl,\n                totalMemberCount: viewState.totalMemberCount\n            },\n            viewState.loggedInUserId\n        );\n        data.originalEvent.preventDefault();\n    };\n\n    var headerActivateHandlers = [\n        [SELECTORS.ACTION_REQUEST_BLOCK, generateConfirmActionHandler(requestBlockUser)],\n        [SELECTORS.ACTION_REQUEST_UNBLOCK, generateConfirmActionHandler(requestUnblockUser)],\n        [SELECTORS.ACTION_REQUEST_ADD_CONTACT, generateConfirmActionHandler(requestAddContact)],\n        [SELECTORS.ACTION_REQUEST_REMOVE_CONTACT, generateConfirmActionHandler(requestRemoveContact)],\n        [SELECTORS.ACTION_REQUEST_DELETE_CONVERSATION, generateConfirmActionHandler(requestDeleteConversation)],\n        [SELECTORS.ACTION_CANCEL_EDIT_MODE, handleCancelEditMode],\n        [SELECTORS.ACTION_VIEW_CONTACT, handleViewContact],\n        [SELECTORS.ACTION_VIEW_GROUP_INFO, handleViewGroupInfo],\n        [SELECTORS.ACTION_CONFIRM_FAVOURITE, handleSetFavourite],\n        [SELECTORS.ACTION_CONFIRM_UNFAVOURITE, handleUnsetFavourite],\n    ];\n    var bodyActivateHandlers = [\n        [SELECTORS.ACTION_CANCEL_CONFIRM, generateConfirmActionHandler(cancelRequest)],\n        [SELECTORS.ACTION_CONFIRM_BLOCK, generateConfirmActionHandler(blockUser)],\n        [SELECTORS.ACTION_CONFIRM_UNBLOCK, generateConfirmActionHandler(unblockUser)],\n        [SELECTORS.ACTION_CONFIRM_ADD_CONTACT, generateConfirmActionHandler(addContact)],\n        [SELECTORS.ACTION_CONFIRM_REMOVE_CONTACT, generateConfirmActionHandler(removeContact)],\n        [SELECTORS.ACTION_CONFIRM_DELETE_SELECTED_MESSAGES, generateConfirmActionHandler(deleteSelectedMessages)],\n        [SELECTORS.ACTION_CONFIRM_DELETE_CONVERSATION, generateConfirmActionHandler(deleteConversation)],\n        [SELECTORS.ACTION_REQUEST_ADD_CONTACT, generateConfirmActionHandler(requestAddContact)],\n        [SELECTORS.ACTION_ACCEPT_CONTACT_REQUEST, generateConfirmActionHandler(acceptContactRequest)],\n        [SELECTORS.ACTION_DECLINE_CONTACT_REQUEST, generateConfirmActionHandler(declineContactRequest)],\n        [SELECTORS.MESSAGE, handleSelectMessage]\n    ];\n    var footerActivateHandlers = [\n        [SELECTORS.SEND_MESSAGE_BUTTON, handleSendMessage],\n        [SELECTORS.ACTION_REQUEST_DELETE_SELECTED_MESSAGES, generateConfirmActionHandler(requestDeleteSelectedMessages)],\n        [SELECTORS.ACTION_REQUEST_ADD_CONTACT, generateConfirmActionHandler(requestAddContact)],\n        [SELECTORS.ACTION_REQUEST_UNBLOCK, generateConfirmActionHandler(requestUnblockUser)],\n    ];\n\n    /**\n     * Listen to, and handle events for conversations.\n     *\n     * @param {Object} header Conversation header container element.\n     * @param {Object} body Conversation body container element.\n     * @param {Object} footer Conversation footer container element.\n     */\n    var registerEventListeners = function(header, body, footer) {\n        var isLoadingMoreMessages = false;\n        var messagesContainer = getMessagesContainer(body);\n\n        AutoRows.init(footer);\n\n        CustomEvents.define(header, [\n            CustomEvents.events.activate\n        ]);\n        CustomEvents.define(body, [\n            CustomEvents.events.activate\n        ]);\n        CustomEvents.define(footer, [\n            CustomEvents.events.activate,\n            CustomEvents.events.enter\n        ]);\n        CustomEvents.define(messagesContainer, [\n            CustomEvents.events.scrollTop,\n            CustomEvents.events.scrollLock\n        ]);\n\n        messagesContainer.on(CustomEvents.events.scrollTop, function(e, data) {\n            var hasMembers = Object.keys(viewState.members).length > 1;\n\n            if (!isResetting && !isLoadingMoreMessages && !hasLoadedAllMessages() && hasMembers) {\n                isLoadingMoreMessages = true;\n                var newState = StateManager.setLoadingMessages(viewState, true);\n                render(newState)\n                    .then(function() {\n                        return loadMessages(viewState.id, LOAD_MESSAGE_LIMIT, getMessagesOffset(), NEWEST_FIRST, []);\n                    })\n                    .then(function() {\n                        isLoadingMoreMessages = false;\n                        setMessagesOffset(getMessagesOffset() + LOAD_MESSAGE_LIMIT);\n                        return;\n                    })\n                    .catch(function(error) {\n                        isLoadingMoreMessages = false;\n                        Notification.exception(error);\n                    });\n            }\n\n            data.originalEvent.preventDefault();\n        });\n\n        headerActivateHandlers.forEach(function(handler) {\n            var selector = handler[0];\n            var handlerFunction = handler[1];\n            header.on(CustomEvents.events.activate, selector, handlerFunction);\n        });\n\n        bodyActivateHandlers.forEach(function(handler) {\n            var selector = handler[0];\n            var handlerFunction = handler[1];\n            body.on(CustomEvents.events.activate, selector, handlerFunction);\n        });\n\n        footerActivateHandlers.forEach(function(handler) {\n            var selector = handler[0];\n            var handlerFunction = handler[1];\n            footer.on(CustomEvents.events.activate, selector, handlerFunction);\n        });\n\n        footer.on(CustomEvents.events.enter, SELECTORS.MESSAGE_TEXT_AREA, function(e, data) {\n            var enterToSend = footer.attr('data-enter-to-send');\n            if (enterToSend && enterToSend != 'false' && enterToSend != '0') {\n                handleSendMessage(e, data);\n            }\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.ROUTE_CHANGED, function(newRouteData) {\n            if (newMessagesPollTimer) {\n                if (newRouteData.route != MessageDrawerRoutes.VIEW_CONVERSATION) {\n                    newMessagesPollTimer.stop();\n                }\n            }\n        });\n    };\n\n    /**\n     * Reset the timer that polls for new messages.\n     *\n     * @param  {Number} conversationId The conversation id\n     */\n    var resetMessagePollTimer = function(conversationId) {\n        if (newMessagesPollTimer) {\n            newMessagesPollTimer.stop();\n        }\n\n        newMessagesPollTimer = new BackOffTimer(\n            getLoadNewMessagesCallback(conversationId, NEWEST_FIRST),\n            function(time) {\n                if (!time) {\n                    return INITIAL_NEW_MESSAGE_POLL_TIMEOUT;\n                }\n\n                return time * 2;\n            }\n        );\n\n        newMessagesPollTimer.start();\n    };\n\n    /**\n     * Reset the state to the initial state and render the UI.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @param  {Number|null} conversationId The conversation id.\n     * @param  {Object} loggedInUserProfile The logged in user's profile.\n     * @return {Promise} Renderer promise.\n     */\n    var resetState = function(body, conversationId, loggedInUserProfile) {\n        var loggedInUserId = loggedInUserProfile.id;\n        var midnight = parseInt(body.attr('data-midnight'), 10);\n        var initialState = StateManager.buildInitialState(midnight, loggedInUserId, conversationId);\n\n        if (!viewState) {\n            viewState = initialState;\n        }\n\n        if (newMessagesPollTimer) {\n            newMessagesPollTimer.stop();\n        }\n\n        return render(initialState);\n    };\n\n    /**\n     * Load a new empty private conversation between two users.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @param  {Object} loggedInUserProfile The logged in user's profile.\n     * @param  {Int} otherUserId The other user's id.\n     * @return {Promise} Renderer promise.\n     */\n    var resetNoConversation = function(body, loggedInUserProfile, otherUserId) {\n        // Always reset the state back to the initial state so that the\n        // state manager and patcher can work correctly.\n        return resetState(body, null, loggedInUserProfile)\n            .then(function() {\n                return Repository.getConversationBetweenUsers(\n                        loggedInUserProfile.id,\n                        otherUserId,\n                        true,\n                        true,\n                        0,\n                        0,\n                        LOAD_MESSAGE_LIMIT,\n                        0,\n                        NEWEST_FIRST\n                    )\n                    .then(function(conversation) {\n                        // Looks like we have a conversation after all! Let's use that.\n                        return resetByConversation(body, conversation, loggedInUserProfile);\n                    })\n                    .catch(function() {\n                        // Can't find a conversation. Oh well. Just load up a blank one.\n                        return loadEmptyPrivateConversation(loggedInUserProfile, otherUserId);\n                    });\n            });\n    };\n\n    /**\n     * Load new messages into the conversation based on a time interval.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @param  {Number} conversationId The conversation id.\n     * @param  {Object} loggedInUserProfile The logged in user's profile.\n     * @return {Promise} Renderer promise.\n     */\n    var resetById = function(body, conversationId, loggedInUserProfile) {\n        var cache = null;\n        if (conversationId in stateCache) {\n            cache = stateCache[conversationId];\n        }\n\n        // Always reset the state back to the initial state so that the\n        // state manager and patcher can work correctly.\n        return resetState(body, conversationId, loggedInUserProfile)\n            .then(function() {\n                if (cache) {\n                    // We've seen this conversation before so there is no need to\n                    // send any network requests.\n                    var newState = cache.state;\n                    // Reset some loading states just in case they were left weirdly.\n                    newState = StateManager.setLoadingMessages(newState, false);\n                    newState = StateManager.setLoadingMembers(newState, false);\n                    setMessagesOffset(cache.messagesOffset);\n                    setLoadedAllMessages(cache.loadedAllMessages);\n                    return render(newState);\n                } else {\n                    return loadNewConversation(\n                        conversationId,\n                        loggedInUserProfile,\n                        LOAD_MESSAGE_LIMIT,\n                        0,\n                        NEWEST_FIRST\n                    );\n                }\n            })\n            .then(function() {\n                return resetMessagePollTimer(conversationId);\n            });\n    };\n\n    /**\n     * Load new messages into the conversation based on a time interval.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @param  {Object} conversation The conversation.\n     * @param  {Object} loggedInUserProfile The logged in user's profile.\n     * @return {Promise} Renderer promise.\n     */\n    var resetByConversation = function(body, conversation, loggedInUserProfile) {\n        var cache = null;\n        if (conversation.id in stateCache) {\n            cache = stateCache[conversation.id];\n        }\n\n        // Always reset the state back to the initial state so that the\n        // state manager and patcher can work correctly.\n        return resetState(body, conversation.id, loggedInUserProfile)\n            .then(function() {\n                if (cache) {\n                    // We've seen this conversation before so there is no need to\n                    // send any network requests.\n                    var newState = cache.state;\n                    // Reset some loading states just in case they were left weirdly.\n                    newState = StateManager.setLoadingMessages(newState, false);\n                    newState = StateManager.setLoadingMembers(newState, false);\n                    setMessagesOffset(cache.messagesOffset);\n                    setLoadedAllMessages(cache.loadedAllMessages);\n                    return render(newState);\n                } else {\n                    return loadExistingConversation(\n                        conversation,\n                        loggedInUserProfile,\n                        LOAD_MESSAGE_LIMIT,\n                        NEWEST_FIRST\n                    );\n                }\n            })\n            .then(function() {\n                return resetMessagePollTimer(conversation.id);\n            });\n    };\n\n    /**\n     * Setup the conversation page. This is a rather complex function because there are a\n     * few combinations of arguments that can be provided to this function to show the\n     * conversation.\n     *\n     * There are:\n     * 1.) A conversation object with no action or other user id (e.g. from the overview page)\n     * 2.) A conversation id with no action or other user id (e.g. from the contacts page)\n     * 3.) No conversation/id with an action and other other user id. (e.g. from contact page)\n     *\n     * @param {Object} header Conversation header container element.\n     * @param {Object} body Conversation body container element.\n     * @param {Object} footer Conversation footer container element.\n     * @param {Object|Number|null} conversationOrId Conversation or id or null\n     * @param {String} action An action to take on the conversation\n     * @param {Number} otherUserId The other user id for a private conversation\n     * @return {Object} jQuery promise\n     */\n    var show = function(header, body, footer, conversationOrId, action, otherUserId) {\n        var conversation = null;\n        var conversationId = null;\n\n        // Check what we were given to identify the conversation.\n        if (conversationOrId && conversationOrId !== null && typeof conversationOrId == 'object') {\n            conversation = conversationOrId;\n            conversationId = parseInt(conversation.id, 10);\n        } else {\n            conversation = null;\n            conversationId = parseInt(conversationOrId, 10);\n            conversationId = isNaN(conversationId) ? null : conversationId;\n        }\n\n        if (!conversationId && action && otherUserId) {\n            // If we didn't get a conversation id got a user id then let's see if we've\n            // previously loaded a private conversation with this user.\n            conversationId = getCachedPrivateConversationIdFromUserId(otherUserId);\n        }\n\n        if (!body.attr('data-init')) {\n            // Generate the render function to bind the header, body, and footer\n            // elements to it so that we don't need to pass them around this module.\n            render = generateRenderFunction(header, body, footer);\n            registerEventListeners(header, body, footer);\n            body.attr('data-init', true);\n        }\n\n        // This is a new conversation if:\n        // 1. We don't already have a state\n        // 2. The given conversation doesn't match the one currently loaded\n        // 3. We have a view state without a conversation id and we weren't given one\n        //    but we were given a different other user id. This happens when the user\n        //    goes from viewing a user that they haven't yet initialised a conversation\n        //    with to viewing a different user that they also haven't initialised a\n        //    conversation with.\n        var isNewConversation = !viewState || (viewState.id != conversationId) || (otherUserId && otherUserId != getOtherUserId());\n        if (isNewConversation) {\n            // Reset all of the states back to the beginning if we're loading a new\n            // conversation.\n            isResetting = true;\n            var renderPromise = null;\n            var loggedInUserProfile = getLoggedInUserProfile(body);\n            if (conversation) {\n                renderPromise = resetByConversation(body, conversation, loggedInUserProfile, otherUserId);\n            } else if (conversationId) {\n                renderPromise = resetById(body, conversationId, loggedInUserProfile, otherUserId);\n            } else {\n                renderPromise = resetNoConversation(body, loggedInUserProfile, otherUserId);\n            }\n\n            return renderPromise\n                .then(function() {\n                    isResetting = false;\n                    // Focus the first element that can receieve it in the header.\n                    header.find(Constants.SELECTORS.CAN_RECEIVE_FOCUS).first().focus();\n                    return;\n                })\n                .catch(function(error) {\n                    isResetting = false;\n                    Notification.exception(error);\n                });\n        }\n\n        // We're not loading a new conversation so we should reset the poll timer to try to load\n        // new messages.\n        resetMessagePollTimer(conversationId);\n\n        if (viewState.type == CONVERSATION_TYPES.PRIVATE && action) {\n            // There are special actions that the user can perform in a private (aka 1-to-1)\n            // conversation.\n            var currentOtherUserId = getOtherUserId();\n\n            switch (action) {\n                case 'block':\n                    return requestBlockUser(currentOtherUserId);\n                case 'unblock':\n                    return requestUnblockUser(currentOtherUserId);\n                case 'add-contact':\n                    return requestAddContact(currentOtherUserId);\n                case 'remove-contact':\n                    return requestRemoveContact(currentOtherUserId);\n            }\n        }\n\n        // Final fallback to return a promise if we didn't need to do anything.\n        return $.Deferred().resolve().promise();\n    };\n\n    /**\n     * String describing this page used for aria-labels.\n     *\n     * @return {Object} jQuery promise\n     */\n    var description = function() {\n        return Str.get_string('messagedrawerviewconversation', 'core_message', viewState.name);\n    };\n\n    return {\n        show: show,\n        description: description\n    };\n});\n"],"file":"message_drawer_view_conversation.es6.min.js"}