{"version":3,"sources":["../src/message_drawer_view_conversation_state_manager.js"],"names":["define","$","cloneState","state","newState","extend","messages","map","message","members","Object","keys","reduce","carry","id","contactrequests","request","formatMessages","loggedInUserId","fromLoggedInUser","useridfrom","parseInt","isRead","isread","userFrom","text","timeCreated","timecreated","formatMembers","member","fullname","profileurl","profileimageurl","profileimageurlsmall","isonline","showonlinestatus","isblocked","iscontact","isdeleted","canmessage","requirescontact","buildInitialState","midnight","name","subname","type","totalMemberCount","imageUrl","isFavourite","hasTriedToLoadMessages","loadingMessages","sendingMessage","loadingMembers","loadingConfirmAction","pendingBlockUserIds","pendingUnblockUserIds","pendingRemoveContactIds","pendingAddContactIds","pendingDeleteMessageIds","pendingDeleteConversation","selectedMessageIds","addMessages","formattedMessages","allMessages","concat","sort","a","b","filter","index","sortedMessages","removeMessages","removeMessageIds","indexOf","removeMessagesById","messagesIds","addMembers","formattedMembers","forEach","removeMembers","setLoadingMessages","value","setSendingMessage","setLoadingMembers","setId","setName","setSubname","setType","setIsFavourite","setTotalMemberCount","count","setImageUrl","url","setLoadingConfirmAction","setPendingDeleteConversation","addPendingBlockUsersById","userIds","push","addPendingRemoveContactsById","addPendingUnblockUsersById","addPendingAddContactsById","addPendingDeleteMessagesById","messageIds","removePendingBlockUsersById","removePendingRemoveContactsById","removePendingUnblockUsersById","removePendingAddContactsById","removePendingDeleteMessagesById","addSelectedMessagesById","removeSelectedMessagesById","markMessagesAsRead","readMessages","readMessageIds","addContactRequests","requests","fromUserId","userid","toUserId","requesteduserid","removeContactRequests","existing"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module operates on the view states from the message_drawer_view_conversation module.\n * It exposes functions that can be used to generate new version of the state.\n *\n * Important notes for this module:\n * 1.) The existing state is always immutable. It should never be modified.\n * 2.) All functions that operate on the state should always clone the state and\n *     modify the cloned state before returning it.\n *\n * It's important that the states remain immutable because they are diff'd in\n * the message_drawer_view_conversation_patcher module in order to work out what\n * has changed.\n *\n * @module     core_message/message_drawer_view_conversation_state_manager\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery'], function($) {\n\n    /**\n     * Clone a state, a state is a collection of information about the variables required to build\n     * the conversation user interface.\n     *\n     * @param  {Object} state State to clone\n     * @return {Object} newstate A copy of the state to clone.\n     */\n    var cloneState = function(state) {\n        var newState = $.extend({}, state);\n        newState.messages = state.messages.map(function(message) {\n            return $.extend({}, message);\n        });\n        newState.members = Object.keys(state.members).reduce(function(carry, id) {\n            carry[id] = $.extend({}, state.members[id]);\n            carry[id].contactrequests = state.members[id].contactrequests.map(function(request) {\n                return $.extend({}, request);\n            });\n            return carry;\n        }, {});\n        return newState;\n    };\n\n    /**\n     * Format messages to be used in a state.\n     *\n     * @param  {Array} messages The messages to format.\n     * @param  {Number} loggedInUserId The logged in user id.\n     * @param  {Array} members The converstation members.\n     * @return {Array} Formatted messages.\n     */\n    var formatMessages = function(messages, loggedInUserId, members) {\n        return messages.map(function(message) {\n            var fromLoggedInUser = message.useridfrom == loggedInUserId;\n            return {\n                id: parseInt(message.id, 10),\n                isRead: message.isread,\n                fromLoggedInUser: fromLoggedInUser,\n                userFrom: members[message.useridfrom],\n                text: message.text,\n                timeCreated: parseInt(message.timecreated, 10)\n            };\n        });\n    };\n\n    /**\n     * Format members to be used in a state.\n     *\n     * @param  {Array} members The messages to format.\n     * @return {Array} Formatted members.\n     */\n    var formatMembers = function(members) {\n        return members.map(function(member) {\n            return {\n                id: member.id,\n                fullname: member.fullname,\n                profileurl: member.profileurl,\n                profileimageurl: member.profileimageurl,\n                profileimageurlsmall: member.profileimageurlsmall,\n                isonline:  member.isonline,\n                showonlinestatus: member.showonlinestatus,\n                isblocked: member.isblocked,\n                iscontact: member.iscontact,\n                isdeleted: member.isdeleted,\n                canmessage:  member.canmessage,\n                requirescontact: member.requirescontact,\n                contactrequests: member.contactrequests || []\n            };\n        });\n    };\n\n    /**\n     * Create an initial (blank) state.\n     *\n     * @param  {Number} midnight Midnight time.\n     * @param  {Number} loggedInUserId The logged in user id.\n     * @param  {Number} id The conversation id.\n     * @return {Object} Initial state.\n     */\n    var buildInitialState = function(midnight, loggedInUserId, id) {\n        return {\n            midnight: midnight,\n            loggedInUserId: loggedInUserId,\n            id: id,\n            name: null,\n            subname: null,\n            type: null,\n            totalMemberCount: null,\n            imageUrl: null,\n            isFavourite: null,\n            members: {},\n            messages: [],\n            hasTriedToLoadMessages: false,\n            loadingMessages: true,\n            sendingMessage: false,\n            loadingMembers: true,\n            loadingConfirmAction: false,\n            pendingBlockUserIds: [],\n            pendingUnblockUserIds: [],\n            pendingRemoveContactIds: [],\n            pendingAddContactIds: [],\n            pendingDeleteMessageIds: [],\n            pendingDeleteConversation: false,\n            selectedMessageIds: []\n        };\n    };\n\n    /**\n     * Add messages to a state and sort them by timecreated.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messages Messages to add to state.\n     * @return {Object} state New state with added messages.\n     */\n    var addMessages = function(state, messages) {\n        var newState = cloneState(state);\n        var formattedMessages = formatMessages(messages, state.loggedInUserId, state.members);\n        var allMessages = state.messages.concat(formattedMessages);\n        // Sort the messages. Oldest to newest.\n        allMessages.sort(function(a, b) {\n            if (a.timeCreated < b.timeCreated) {\n                return -1;\n            } else if (a.timeCreated > b.timeCreated) {\n                return 1;\n            } else if (a.id < b.id) {\n                return -1;\n            } else if (a.id > b.id) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n\n        // Filter out any duplicate messages.\n        newState.messages = allMessages.filter(function(message, index, sortedMessages) {\n            return !index || message.id !== sortedMessages[index - 1].id;\n        });\n\n        return newState;\n    };\n\n    /**\n     * Remove messages from state.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messages Messages to remove from state.\n     * @return {Object} state New state with removed messages.\n     */\n    var removeMessages = function(state, messages) {\n        var newState = cloneState(state);\n        var removeMessageIds = messages.map(function(message) {\n            return message.id;\n        });\n        newState.messages = newState.messages.filter(function(message) {\n            return removeMessageIds.indexOf(message.id) < 0;\n        });\n\n        return newState;\n    };\n\n    /**\n     * Remove messages from state by message id.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messagesIds Message ids to remove from state.\n     * @return {Object} state New state with removed messages.\n     */\n    var removeMessagesById = function(state, messagesIds) {\n        var newState = cloneState(state);\n        newState.messages = newState.messages.filter(function(message) {\n            return messagesIds.indexOf(message.id) < 0;\n        });\n\n        return newState;\n    };\n\n    /**\n     * Add conversation member to state.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} members Conversation members to be added to state.\n     * @return {Object} New state with added members.\n     */\n    var addMembers = function(state, members) {\n        var newState = cloneState(state);\n        var formattedMembers = formatMembers(members);\n        formattedMembers.forEach(function(member) {\n            newState.members[member.id] = member;\n        });\n        return newState;\n    };\n\n    /**\n     * Remove members from state.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} members Members to be removed from state.\n     * @return {Object} New state with removed members.\n     */\n    var removeMembers = function(state, members) {\n        var newState = cloneState(state);\n        members.forEach(function(member) {\n            delete newState.members[member.id];\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state loading messages attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New loading messages value.\n     * @return {Object} New state with loading messages attribute.\n     */\n    var setLoadingMessages = function(state, value) {\n        var newState = cloneState(state);\n        newState.loadingMessages = value;\n        if (state.loadingMessages && !value) {\n            // If we're going from loading to not loading then\n            // it means we've tried to load.\n            newState.hasTriedToLoadMessages = true;\n        }\n        return newState;\n    };\n\n    /**\n     * Set the state sending message attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New sending message value.\n     * @return {Object} New state with sending message attribute.\n     */\n    var setSendingMessage = function(state, value) {\n        var newState = cloneState(state);\n        newState.sendingMessage = value;\n        return newState;\n    };\n\n    /**\n     * Set the state loading members attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New loading members value.\n     * @return {Object} New state with loading members attribute.\n     */\n    var setLoadingMembers = function(state, value) {\n        var newState = cloneState(state);\n        newState.loadingMembers = value;\n        return newState;\n    };\n\n    /**\n     * Set the conversation id.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} value The ID.\n     * @return {Object} New state.\n     */\n    var setId = function(state, value) {\n        var newState = cloneState(state);\n        newState.id = value;\n        return newState;\n    };\n\n    /**\n     * Set the state name attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} value New name value.\n     * @return {Object} New state with name attribute.\n     */\n    var setName = function(state, value) {\n        var newState = cloneState(state);\n        newState.name = value;\n        return newState;\n    };\n\n    /**\n     * Set the state subname attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} value New subname value.\n     * @return {Object} New state.\n     */\n    var setSubname = function(state, value) {\n        var newState = cloneState(state);\n        newState.subname = value;\n        return newState;\n    };\n\n    /**\n     * Set the conversation type.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Int} type Conversation type.\n     * @return {Object} New state.\n     */\n    var setType = function(state, type) {\n        var newState = cloneState(state);\n        newState.type = type;\n        return newState;\n    };\n\n    /**\n     * Set whether the conversation is a favourite conversation.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} isFavourite If it's a favourite.\n     * @return {Object} New state.\n     */\n    var setIsFavourite = function(state, isFavourite) {\n        var newState = cloneState(state);\n        newState.isFavourite = isFavourite;\n        return newState;\n    };\n\n    /**\n     * Set the total member count.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} count The count.\n     * @return {Object} New state.\n     */\n    var setTotalMemberCount = function(state, count) {\n        var newState = cloneState(state);\n        newState.totalMemberCount = count;\n        return newState;\n    };\n\n    /**\n     * Set the conversation image url.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} url The url to the image.\n     * @return {Object} New state.\n     */\n    var setImageUrl = function(state, url) {\n        var newState = cloneState(state);\n        newState.imageUrl = url;\n        return newState;\n    };\n\n    /**\n     * Set the state loading confirm action attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New loading confirm action value.\n     * @return {Object} New state with loading confirm action attribute.\n     */\n    var setLoadingConfirmAction = function(state, value) {\n        var newState = cloneState(state);\n        newState.loadingConfirmAction = value;\n        return newState;\n    };\n\n    /**\n     * Set the state pending delete conversation attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New pending delete conversation value.\n     * @return {Object} New state with pending delete conversation attribute.\n     */\n    var setPendingDeleteConversation = function(state, value) {\n        var newState = cloneState(state);\n        newState.pendingDeleteConversation = value;\n        return newState;\n    };\n\n    /**\n     * Set the state pending block userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to block.\n     * @return {Object} New state with array of pending block userids.\n     */\n    var addPendingBlockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingBlockUserIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending remove userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove.\n     * @return {Object} New state with array of pending remove userids.\n     */\n    var addPendingRemoveContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingRemoveContactIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending unblock userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to unblock.\n     * @return {Object} New state with array of pending unblock userids.\n     */\n    var addPendingUnblockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingUnblockUserIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending add users to contacts userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to add users to contacts.\n     * @return {Object} New state with array of pending add users to contacts userids.\n     */\n    var addPendingAddContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingAddContactIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending delete messages.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages to delete.\n     * @return {Object} New state with array of pending delete message ids.\n     */\n    var addPendingDeleteMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds.forEach(function(id) {\n            newState.pendingDeleteMessageIds.push(id);\n        });\n        return newState;\n    };\n\n\n    /**\n     * Update the state pending block userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to block.\n     * @return {Object} New state with array of pending block userids.\n     */\n    var removePendingBlockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingBlockUserIds = newState.pendingBlockUserIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending remove userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to remove.\n     * @return {Object} New state with array of pending remove userids.\n     */\n    var removePendingRemoveContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingRemoveContactIds = newState.pendingRemoveContactIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending unblock userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to unblock.\n     * @return {Object} New state with array of pending unblock userids.\n     */\n    var removePendingUnblockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingUnblockUserIds = newState.pendingUnblockUserIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending add to contacts userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to add to contacts.\n     * @return {Object} New state with array of pending add to contacts userids.\n     */\n    var removePendingAddContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingAddContactIds = newState.pendingAddContactIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending delete messages userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Message ids to remove from the list of messages to delete.\n     * @return {Object} New state with array of messages to delete.\n     */\n    var removePendingDeleteMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        newState.pendingDeleteMessageIds = newState.pendingDeleteMessageIds.filter(function(id) {\n            return messageIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Add messages to state selected messages.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages that are selected.\n     * @return {Object} New state with array of not blocked members.\n     */\n    var addSelectedMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        newState.selectedMessageIds = newState.selectedMessageIds.concat(messageIds);\n        return newState;\n    };\n\n    /**\n     * Remove messages from the state selected messages.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages to remove from selected messages.\n     * @return {Object} New state with array of selected messages.\n     */\n    var removeSelectedMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        newState.selectedMessageIds = newState.selectedMessageIds.filter(function(id) {\n            return messageIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Mark messages as read.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} readMessages Messages that are read.\n     * @return {Object} New state with array of messages that have the isread attribute set.\n     */\n    var markMessagesAsRead = function(state, readMessages) {\n        var newState = cloneState(state);\n        var readMessageIds = readMessages.map(function(message) {\n            return message.id;\n        });\n        newState.messages = newState.messages.map(function(message) {\n            if (readMessageIds.indexOf(message.id) >= 0) {\n                message.isRead = true;\n            }\n\n            return message;\n        });\n        return newState;\n    };\n\n    /**\n     * Add a contact request to each of the members that the request is for.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} requests The contact requests\n     * @return {Object} New state\n     */\n    var addContactRequests = function(state, requests) {\n        var newState = cloneState(state);\n\n        requests.forEach(function(request) {\n            var fromUserId = request.userid;\n            var toUserId = request.requesteduserid;\n            newState.members[fromUserId].contactrequests.push(request);\n            newState.members[toUserId].contactrequests.push(request);\n        });\n\n        return newState;\n    };\n\n    /**\n     * Remove a contact request from the members of that request.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} requests The contact requests\n     * @return {Object} New state\n     */\n    var removeContactRequests = function(state, requests) {\n        var newState = cloneState(state);\n        requests.forEach(function(request) {\n            var fromUserId = request.userid;\n            var toUserId = request.requesteduserid;\n\n            newState.members[fromUserId].contactrequests = newState.members[fromUserId].contactrequests.filter(function(existing) {\n                return existing.userid != fromUserId;\n            });\n            newState.members[toUserId].contactrequests = newState.members[toUserId].contactrequests.filter(function(existing) {\n                return existing.requesteduserid != toUserId;\n            });\n        });\n\n        return newState;\n    };\n\n    return {\n        buildInitialState: buildInitialState,\n        addMessages: addMessages,\n        removeMessages: removeMessages,\n        removeMessagesById: removeMessagesById,\n        addMembers: addMembers,\n        removeMembers: removeMembers,\n        setLoadingMessages: setLoadingMessages,\n        setSendingMessage: setSendingMessage,\n        setLoadingMembers: setLoadingMembers,\n        setId: setId,\n        setName: setName,\n        setSubname: setSubname,\n        setType: setType,\n        setIsFavourite: setIsFavourite,\n        setTotalMemberCount: setTotalMemberCount,\n        setImageUrl: setImageUrl,\n        setLoadingConfirmAction: setLoadingConfirmAction,\n        setPendingDeleteConversation: setPendingDeleteConversation,\n        addPendingBlockUsersById: addPendingBlockUsersById,\n        addPendingRemoveContactsById: addPendingRemoveContactsById,\n        addPendingUnblockUsersById: addPendingUnblockUsersById,\n        addPendingAddContactsById: addPendingAddContactsById,\n        addPendingDeleteMessagesById: addPendingDeleteMessagesById,\n        removePendingBlockUsersById: removePendingBlockUsersById,\n        removePendingRemoveContactsById: removePendingRemoveContactsById,\n        removePendingUnblockUsersById: removePendingUnblockUsersById,\n        removePendingAddContactsById: removePendingAddContactsById,\n        removePendingDeleteMessagesById: removePendingDeleteMessagesById,\n        addSelectedMessagesById: addSelectedMessagesById,\n        removeSelectedMessagesById: removeSelectedMessagesById,\n        markMessagesAsRead: markMessagesAsRead,\n        addContactRequests: addContactRequests,\n        removeContactRequests: removeContactRequests\n    };\n});\n"],"file":"message_drawer_view_conversation_state_manager.es6.min.js"}