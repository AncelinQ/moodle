{"version":3,"sources":["../src/message_area_messages.js"],"names":["define","$","Ajax","Templates","Notification","CustomEvents","AutoRows","Actions","ModalFactory","ModalEvents","Str","Events","BackOffTimer","MESSAGES_AREA_DEFAULT_HEIGHT","SELECTORS","BLOCKTIME","CANCELDELETEMESSAGES","CONTACT","CONVERSATIONS","DELETEALLMESSAGES","DELETEMESSAGES","LOADINGICON","MESSAGE","MESSAGERESPONSE","MESSAGES","MESSAGESAREA","MESSAGINGAREA","SENDMESSAGE","SENDMESSAGETEXT","SHOWCONTACTS","STARTDELETEMESSAGES","MILLISECONDSINSEC","Messages","messageArea","_init","prototype","_isSendingMessage","_isLoadingMessages","_numMessagesDisplayed","_messageQueue","_numMessagesToRetrieve","_confirmationModal","_latestMessageTimestamp","_backoffTimer","node","events","activate","up","down","enter","window","height","init","onCustomEvent","CONVERSATIONSELECTED","_viewMessages","bind","CHOOSEMESSAGESTODELETE","_chooseMessagesToDelete","_hideDeleteAction","onDelegateEvent","_sendMessage","_startDeleting","_deleteMessages","_deleteAllMessages","_triggerCancelMessagesToDelete","_toggleMessage","_hideMessagingArea","_selectPreviousMessage","_selectNextMessage","_setMessaging","_clearMessaging","document","on","ROW_CHANGE","_adjustMessagesAreaHeight","messages","find","length","_addScrollEventListener","data","_loadNewMessages","getIncrementalCallback","pollmin","pollmax","polltimeout","start","event","userid","stop","markMessagesAsRead","call","methodname","args","useridto","getCurrentUserId","useridfrom","numberreceived","render","then","html","js","replaceNodeContents","conversationnode","hasClass","removeClass","trigger","_getMessages","restart","focus","fail","exception","_loadMessages","prependNodeContents","_getUserId","remove","newHtml","_hasMatchingBlockTime","oldheight","scrollHeight","newheight","scrollTop","shouldScrollBottom","innerHeight","_addMessagesToDom","always","fromTimestamp","currentuserid","otheruserid","limitfrom","limitnum","newest","timefrom","promises","latestMessage","timecreated","ex","element","text","val","trim","touserid","prop","response","Error","errormessage","MESSAGESENT","_addLastMessageToDom","addClass","attr","checkboxes","requests","messagestoremove","each","id","messageid","isread","push","read","when","updatemessage","lastmessage","last","lastremovedmessage","key","message","blocktime","MESSAGESDELETED","catch","_scrollBottom","show","stringsPromise","get_strings","component","deleteModalPromise","create","type","types","SAVE_CANCEL","s","modal","setTitle","setBody","setSaveButtonText","getRoot","save","otherUserId","request","empty","CONVERSATIONDELETED","removeAttr","messagesArea","filter","result","appendNodeContents","e","currentMessage","target","closest","prev","is","originalEvent","preventDefault","stopPropagation","next","actions","chooseMessagesToDelete","_isEditing","messagesResponse","currentMessageResponseHeight","outerHeight","newMessagesAreaHeight","_sendMessageHandler","domHtml","loadingPreviousMessages","blockTime","blockTimePos","newBlockTime","newBlockTimePos"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module handles the message area of the messaging area.\n *\n * @module     core_message/message_area_messages\n * @package    core_message\n * @copyright  2016 Mark Nelson <markn@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/ajax', 'core/templates', 'core/notification', 'core/custom_interaction_events',\n        'core/auto_rows', 'core_message/message_area_actions', 'core/modal_factory', 'core/modal_events',\n        'core/str', 'core_message/message_area_events', 'core/backoff_timer'],\n    function($, Ajax, Templates, Notification, CustomEvents, AutoRows, Actions, ModalFactory,\n             ModalEvents, Str, Events, BackOffTimer) {\n\n        /** @type {int} The message area default height. */\n        var MESSAGES_AREA_DEFAULT_HEIGHT = 500;\n\n        /** @type {int} The response default height. */\n        var MESSAGES_RESPONSE_DEFAULT_HEIGHT = 50;\n\n        /** @type {Object} The list of selectors for the message area. */\n        var SELECTORS = {\n            BLOCKTIME: \"[data-region='blocktime']\",\n            CANCELDELETEMESSAGES: \"[data-action='cancel-delete-messages']\",\n            CONTACT: \"[data-region='contact']\",\n            CONVERSATIONS: \"[data-region='contacts'][data-region-content='conversations']\",\n            DELETEALLMESSAGES: \"[data-action='delete-all-messages']\",\n            DELETEMESSAGES: \"[data-action='delete-messages']\",\n            LOADINGICON: '.loading-icon',\n            MESSAGE: \"[data-region='message']\",\n            MESSAGERESPONSE: \"[data-region='response']\",\n            MESSAGES: \"[data-region='messages']\",\n            MESSAGESAREA: \"[data-region='messages-area']\",\n            MESSAGINGAREA: \"[data-region='messaging-area']\",\n            SENDMESSAGE: \"[data-action='send-message']\",\n            SENDMESSAGETEXT: \"[data-region='send-message-txt']\",\n            SHOWCONTACTS: \"[data-action='show-contacts']\",\n            STARTDELETEMESSAGES: \"[data-action='start-delete-messages']\",\n        };\n\n        /** @type {int} The number of milliseconds in a second. */\n        var MILLISECONDSINSEC = 1000;\n\n        /**\n         * Messages class.\n         *\n         * @param {Messagearea} messageArea The messaging area object.\n         */\n        function Messages(messageArea) {\n            this.messageArea = messageArea;\n            this._init();\n        }\n\n        /** @type {Boolean} checks if we are sending a message */\n        Messages.prototype._isSendingMessage = false;\n\n        /** @type {Boolean} checks if we are currently loading messages */\n        Messages.prototype._isLoadingMessages = false;\n\n        /** @type {int} the number of messagess displayed */\n        Messages.prototype._numMessagesDisplayed = 0;\n\n        /** @type {array} the messages displayed or about to be displayed on the page */\n        Messages.prototype._messageQueue = [];\n\n        /** @type {int} the number of messages to retrieve */\n        Messages.prototype._numMessagesToRetrieve = 20;\n\n        /** @type {Modal} the confirmation modal */\n        Messages.prototype._confirmationModal = null;\n\n        /** @type {int} the timestamp for the most recent visible message */\n        Messages.prototype._latestMessageTimestamp = 0;\n\n        /** @type {BackOffTimer} the backoff timer */\n        Messages.prototype._backoffTimer = null;\n\n        /** @type {Messagearea} The messaging area object. */\n        Messages.prototype.messageArea = null;\n\n        /**\n         * Initialise the event listeners.\n         *\n         * @private\n         */\n        Messages.prototype._init = function() {\n            CustomEvents.define(this.messageArea.node, [\n                CustomEvents.events.activate,\n                CustomEvents.events.up,\n                CustomEvents.events.down,\n                CustomEvents.events.enter,\n            ]);\n\n            // We have a responsive media query based on height that reduces this size on screens shorter than 670.\n            if ($(window).height() <= 670) {\n                MESSAGES_AREA_DEFAULT_HEIGHT = 400;\n            }\n\n            AutoRows.init(this.messageArea.node);\n\n            this.messageArea.onCustomEvent(Events.CONVERSATIONSELECTED, this._viewMessages.bind(this));\n            this.messageArea.onCustomEvent(Events.SENDMESSAGE, this._viewMessages.bind(this));\n            this.messageArea.onCustomEvent(Events.CHOOSEMESSAGESTODELETE, this._chooseMessagesToDelete.bind(this));\n            this.messageArea.onCustomEvent(Events.CANCELDELETEMESSAGES, this._hideDeleteAction.bind(this));\n            this.messageArea.onDelegateEvent(CustomEvents.events.activate, SELECTORS.SENDMESSAGE,\n                this._sendMessage.bind(this));\n            this.messageArea.onDelegateEvent(CustomEvents.events.activate, SELECTORS.STARTDELETEMESSAGES,\n                this._startDeleting.bind(this));\n            this.messageArea.onDelegateEvent(CustomEvents.events.activate, SELECTORS.DELETEMESSAGES,\n                this._deleteMessages.bind(this));\n            this.messageArea.onDelegateEvent(CustomEvents.events.activate, SELECTORS.DELETEALLMESSAGES,\n                this._deleteAllMessages.bind(this));\n            this.messageArea.onDelegateEvent(CustomEvents.events.activate, SELECTORS.CANCELDELETEMESSAGES,\n                this._triggerCancelMessagesToDelete.bind(this));\n            this.messageArea.onDelegateEvent(CustomEvents.events.activate, SELECTORS.MESSAGE,\n                this._toggleMessage.bind(this));\n            this.messageArea.onDelegateEvent(CustomEvents.events.activate, SELECTORS.SHOWCONTACTS,\n                this._hideMessagingArea.bind(this));\n\n            this.messageArea.onDelegateEvent(CustomEvents.events.up, SELECTORS.MESSAGE,\n                this._selectPreviousMessage.bind(this));\n            this.messageArea.onDelegateEvent(CustomEvents.events.down, SELECTORS.MESSAGE,\n                this._selectNextMessage.bind(this));\n\n            this.messageArea.onDelegateEvent('focus', SELECTORS.SENDMESSAGETEXT, this._setMessaging.bind(this));\n            this.messageArea.onDelegateEvent('blur', SELECTORS.SENDMESSAGETEXT, this._clearMessaging.bind(this));\n\n            $(document).on(AutoRows.events.ROW_CHANGE, this._adjustMessagesAreaHeight.bind(this));\n\n            // Check if any messages have been displayed on page load.\n            var messages = this.messageArea.find(SELECTORS.MESSAGES);\n            if (messages.length) {\n                this._addScrollEventListener(messages.find(SELECTORS.MESSAGE).length);\n                this._latestMessageTimestamp = messages.find(SELECTORS.MESSAGE + ':last').data('timecreated');\n            }\n\n            // Create a timer to poll the server for new messages.\n            this._backoffTimer = new BackOffTimer(this._loadNewMessages.bind(this),\n                BackOffTimer.getIncrementalCallback(this.messageArea.pollmin * MILLISECONDSINSEC, MILLISECONDSINSEC,\n                    this.messageArea.pollmax * MILLISECONDSINSEC, this.messageArea.polltimeout * MILLISECONDSINSEC));\n\n            // Start the timer.\n            this._backoffTimer.start();\n        };\n\n        /**\n         * View the message panel.\n         *\n         * @param {Event} event\n         * @param {int} userid\n         * @return {Promise} The promise resolved when the messages have been loaded.\n         * @private\n         */\n        Messages.prototype._viewMessages = function(event, userid) {\n            // We are viewing another user, or re-loading the panel, so set number of messages displayed to 0.\n            this._numMessagesDisplayed = 0;\n            // Stop the existing timer so we can set up the new user's messages.\n            this._backoffTimer.stop();\n            // Reset the latest timestamp when we change the messages view.\n            this._latestMessageTimestamp = 0;\n\n            // Mark all the messages as read.\n            var markMessagesAsRead = Ajax.call([{\n                methodname: 'core_message_mark_all_messages_as_read',\n                args: {\n                    useridto: this.messageArea.getCurrentUserId(),\n                    useridfrom: userid\n                }\n            }]);\n\n            // Keep track of the number of messages received.\n            var numberreceived = 0;\n            // Show loading template.\n            return Templates.render('core/loading', {}).then(function(html, js) {\n                Templates.replaceNodeContents(this.messageArea.find(SELECTORS.MESSAGESAREA), html, js);\n                return markMessagesAsRead[0];\n            }.bind(this)).then(function() {\n                var conversationnode = this.messageArea.find(SELECTORS.CONVERSATIONS + \" \" +\n                    SELECTORS.CONTACT + \"[data-userid='\" + userid + \"']\");\n                if (conversationnode.hasClass('unread')) {\n                    // Remove the class.\n                    conversationnode.removeClass('unread');\n                    // Trigger an event letting the notification popover (and whoever else) know.\n                    $(document).trigger('messagearea:conversationselected', userid);\n                }\n                return this._getMessages(userid);\n            }.bind(this)).then(function(data) {\n                numberreceived = data.messages.length;\n                // We have the data - lets render the template with it.\n                return Templates.render('core_message/message_area_messages_area', data);\n            }).then(function(html, js) {\n                Templates.replaceNodeContents(this.messageArea.find(SELECTORS.MESSAGESAREA), html, js);\n                this._addScrollEventListener(numberreceived);\n                // Restart the poll timer.\n                this._backoffTimer.restart();\n                this.messageArea.find(SELECTORS.SENDMESSAGETEXT).focus();\n            }.bind(this)).fail(Notification.exception);\n        };\n\n        /**\n         * Loads messages while scrolling.\n         *\n         * @return {Promise|boolean} The promise resolved when the messages have been loaded.\n         * @private\n         */\n        Messages.prototype._loadMessages = function() {\n            if (this._isLoadingMessages) {\n                return false;\n            }\n\n            this._isLoadingMessages = true;\n\n            // Keep track of the number of messages received.\n            var numberreceived = 0;\n            // Show loading template.\n            return Templates.render('core/loading', {}).then(function(html, js) {\n                Templates.prependNodeContents(this.messageArea.find(SELECTORS.MESSAGES),\n                    \"<div style='text-align:center'>\" + html + \"</div>\", js);\n                return this._getMessages(this._getUserId());\n            }.bind(this)).then(function(data) {\n                numberreceived = data.messages.length;\n                // We have the data - lets render the template with it.\n                return Templates.render('core_message/message_area_messages', data);\n            }).then(function(html, js) {\n                // Remove the loading icon.\n                this.messageArea.find(SELECTORS.MESSAGES + \" \" +\n                    SELECTORS.LOADINGICON).remove();\n                // Check if we got something to do.\n                if (numberreceived > 0) {\n                    var newHtml = $('<div>' + html + '</div>');\n                    if (this._hasMatchingBlockTime(this.messageArea.node, newHtml, true)) {\n                        this.messageArea.node.find(SELECTORS.BLOCKTIME + ':first').remove();\n                    }\n                    // Get height before we add the messages.\n                    var oldheight = this.messageArea.find(SELECTORS.MESSAGES)[0].scrollHeight;\n                    // Show the new content.\n                    Templates.prependNodeContents(this.messageArea.find(SELECTORS.MESSAGES), html, js);\n                    // Get height after we add the messages.\n                    var newheight = this.messageArea.find(SELECTORS.MESSAGES)[0].scrollHeight;\n                    // Make sure scroll bar is at the location before we loaded more messages.\n                    this.messageArea.find(SELECTORS.MESSAGES).scrollTop(newheight - oldheight);\n                    // Increment the number of messages displayed.\n                    this._numMessagesDisplayed += numberreceived;\n                }\n                // Mark that we are no longer busy loading data.\n                this._isLoadingMessages = false;\n            }.bind(this)).fail(Notification.exception);\n        };\n\n        /**\n         * Loads and renders messages newer than the most recently seen messages.\n         *\n         * @return {Promise|boolean} The promise resolved when the messages have been loaded.\n         * @private\n         */\n        Messages.prototype._loadNewMessages = function() {\n            if (this._isLoadingMessages) {\n                return false;\n            }\n\n            // If we have no user id yet then bail early.\n            if (!this._getUserId()) {\n                return false;\n            }\n\n            this._isLoadingMessages = true;\n\n            // Only scroll the message window if the user hasn't scrolled up.\n            var shouldScrollBottom = false;\n            var messages = this.messageArea.find(SELECTORS.MESSAGES);\n            if (messages.length !== 0) {\n                var scrollTop = messages.scrollTop();\n                var innerHeight = messages.innerHeight();\n                var scrollHeight = messages[0].scrollHeight;\n\n                if (scrollTop + innerHeight >= scrollHeight) {\n                    shouldScrollBottom = true;\n                }\n            }\n\n            // Keep track of the number of messages received.\n            return this._getMessages(this._getUserId(), true).then(function(data) {\n                return this._addMessagesToDom(data.messages, shouldScrollBottom);\n            }.bind(this)).always(function() {\n                // Mark that we are no longer busy loading data.\n                this._isLoadingMessages = false;\n            }.bind(this)).fail(Notification.exception);\n        };\n\n        /**\n         * Handles returning a list of messages to display.\n         *\n         * @param {int} userid\n         * @param {bool} fromTimestamp Load messages from the latest known timestamp\n         * @return {Promise} The promise resolved when the contact area has been rendered\n         * @private\n         */\n        Messages.prototype._getMessages = function(userid, fromTimestamp) {\n            var args = {\n                currentuserid: this.messageArea.getCurrentUserId(),\n                otheruserid: userid,\n                limitfrom: this._numMessagesDisplayed,\n                limitnum: this._numMessagesToRetrieve,\n                newest: true\n            };\n\n            // If we're trying to load new messages since the message UI was\n            // rendered. Used for ajax polling while user is on the message UI.\n            if (fromTimestamp) {\n                args.timefrom = this._latestMessageTimestamp;\n                // Remove limit and offset. We want all new messages.\n                args.limitfrom = 0;\n                args.limitnum = 0;\n            }\n\n            // Call the web service to get our data.\n            var promises = Ajax.call([{\n                methodname: 'core_message_data_for_messagearea_messages',\n                args: args,\n            }]);\n\n            // Do stuff when we get data back.\n            return promises[0].then(function(data) {\n                var messages = data.messages;\n\n                // Did we get any new messages?\n                if (messages && messages.length) {\n                    var latestMessage = messages[messages.length - 1];\n\n                    // Update our record of the latest known message for future requests.\n                    if (latestMessage.timecreated > this._latestMessageTimestamp) {\n                        // Next request should be for the second after the most recent message we've seen.\n                        this._latestMessageTimestamp = latestMessage.timecreated + 1;\n                    }\n                }\n\n                return data;\n            }.bind(this)).fail(function(ex) {\n                // Stop the timer if we received an error so that we don't keep spamming the server.\n                this._backoffTimer.stop();\n                Notification.exception(ex);\n            }.bind(this));\n        };\n\n        /**\n         * Handles sending a message.\n         *\n         * @return {Promise|boolean} The promise resolved once the message has been sent.\n         * @private\n         */\n        Messages.prototype._sendMessage = function() {\n            var element = this.messageArea.find(SELECTORS.SENDMESSAGETEXT);\n            var text = element.val().trim();\n\n            // Do not do anything if it is empty.\n            if (text === '') {\n                return false;\n            }\n\n            // If we are sending a message, don't do anything, be patient!\n            if (this._isSendingMessage) {\n                return false;\n            }\n\n            // Ok, mark that we are sending a message.\n            this._isSendingMessage = true;\n\n            // Call the web service to save our message.\n            var promises = Ajax.call([{\n                methodname: 'core_message_send_instant_messages',\n                args: {\n                    messages: [\n                        {\n                            touserid: this._getUserId(),\n                            text: text\n                        }\n                    ]\n                }\n            }]);\n\n            element.prop('disabled', true);\n\n            // Update the DOM when we get some data back.\n            return promises[0].then(function(response) {\n                if (response.length < 0) {\n                    // Even errors should return valid data.\n                    throw new Error('Invalid response');\n                }\n                if (response[0].errormessage) {\n                    throw new Error(response[0].errormessage);\n                }\n                // Fire an event to say the message was sent.\n                this.messageArea.trigger(Events.MESSAGESENT, [this._getUserId(), text]);\n                // Update the messaging area.\n                return this._addLastMessageToDom();\n            }.bind(this)).then(function() {\n                // Ok, we are no longer sending a message.\n                this._isSendingMessage = false;\n            }.bind(this)).always(function() {\n                element.prop('disabled', false);\n                element.focus();\n            }).fail(Notification.exception);\n        };\n\n        /**\n         * Handles selecting messages to delete.\n         *\n         * @private\n         */\n        Messages.prototype._chooseMessagesToDelete = function() {\n            this.messageArea.find(SELECTORS.MESSAGESAREA).addClass('editing');\n            this.messageArea.find(SELECTORS.MESSAGE)\n                .attr('role', 'checkbox')\n                .attr('aria-checked', 'false');\n        };\n\n        /**\n         * Handles deleting messages.\n         *\n         * @private\n         */\n        Messages.prototype._deleteMessages = function() {\n            var userid = this.messageArea.getCurrentUserId();\n            var checkboxes = this.messageArea.find(SELECTORS.MESSAGE + \"[aria-checked='true']\");\n            var requests = [];\n            var messagestoremove = [];\n\n            // Go through all the checked checkboxes and prepare them for deletion.\n            checkboxes.each(function(id, element) {\n                var node = $(element);\n                var messageid = node.data('messageid');\n                var isread = node.data('messageread') ? 1 : 0;\n                messagestoremove.push(node);\n                requests.push({\n                    methodname: 'core_message_delete_message',\n                    args: {\n                        messageid: messageid,\n                        userid: userid,\n                        read: isread\n                    }\n                });\n            });\n            if (requests.length > 0) {\n                $.when(Ajax.call(requests)).then(function() {\n                    // Store the last message on the page, and the last message being deleted.\n                    var updatemessage = null;\n                    var messages = this.messageArea.find(SELECTORS.MESSAGE);\n                    var lastmessage = messages.last();\n                    var lastremovedmessage = messagestoremove[messagestoremove.length - 1];\n                    // Remove the messages from the DOM.\n                    $.each(messagestoremove, function(key, message) {\n                        // Remove the message.\n                        message.remove();\n                    });\n                    // If the last message was deleted then we need to provide the new last message.\n                    if (lastmessage.data('id') === lastremovedmessage.data('id')) {\n                        updatemessage = this.messageArea.find(SELECTORS.MESSAGE).last();\n                    }\n                    // Now we have removed all the messages from the DOM lets remove any block times we may need to as well.\n                    $.each(messagestoremove, function(key, message) {\n                        // First - let's make sure there are no more messages in that time block.\n                        var blocktime = message.data('blocktime');\n                        if (this.messageArea.find(SELECTORS.MESSAGE +\n                            \"[data-blocktime='\" + blocktime + \"']\").length === 0) {\n                            this.messageArea.find(SELECTORS.BLOCKTIME +\n                                \"[data-blocktime='\" + blocktime + \"']\").remove();\n                        }\n                    }.bind(this));\n\n                    // If there are no messages at all, then remove conversation panel.\n                    if (this.messageArea.find(SELECTORS.MESSAGE).length === 0) {\n                        this.messageArea.find(SELECTORS.CONVERSATIONS + \" \" +\n                            SELECTORS.CONTACT + \"[data-userid='\" + this._getUserId() + \"']\").remove();\n                    }\n\n                    // Trigger event letting other modules know messages were deleted.\n                    this.messageArea.trigger(Events.MESSAGESDELETED, [this._getUserId(), updatemessage]);\n                }.bind(this)).catch(Notification.exception);\n            } else {\n                // Trigger event letting other modules know messages were deleted.\n                this.messageArea.trigger(Events.MESSAGESDELETED, this._getUserId());\n            }\n\n            // Hide the items responsible for deleting messages.\n            this._hideDeleteAction();\n        };\n\n        /**\n         * Handles adding a scrolling event listener.\n         *\n         * @param {int} numberreceived The number of messages received\n         * @private\n         */\n        Messages.prototype._addScrollEventListener = function(numberreceived) {\n            // Scroll to the bottom.\n            this._scrollBottom();\n            // Set the number of messages displayed.\n            this._numMessagesDisplayed = numberreceived;\n            // Now enable the ability to infinitely scroll through messages.\n            CustomEvents.define(this.messageArea.find(SELECTORS.MESSAGES), [\n                CustomEvents.events.scrollTop\n            ]);\n            // Assign the event for scrolling.\n            this.messageArea.onCustomEvent(CustomEvents.events.scrollTop, this._loadMessages.bind(this));\n        };\n\n        /**\n         * Handles deleting a conversation.\n         *\n         * @private\n         */\n        Messages.prototype._deleteAllMessages = function() {\n            if (this._confirmationModal) {\n                // Just show the existing modal.\n                this._confirmationModal.show();\n                return;\n            }\n\n            var stringsPromise = Str.get_strings([\n                {key: 'confirm'},\n                {key: 'deleteallconfirm', component: 'message'},\n                {key: 'delete'}\n            ]);\n            var deleteModalPromise = ModalFactory.create(\n                {\n                    type: ModalFactory.types.SAVE_CANCEL\n                },\n                this.messageArea.find(SELECTORS.DELETEALLMESSAGES)\n            );\n\n            $.when(stringsPromise, deleteModalPromise).then(function(s, modal) {\n                modal.setTitle(s[0]);\n                modal.setBody(s[1]);\n                modal.setSaveButtonText(s[2]);\n\n                this._confirmationModal = modal;\n                // Only delete the conversation if the user agreed in the confirmation modal.\n                modal.getRoot().on(ModalEvents.save, function() {\n                    var otherUserId = this._getUserId();\n                    var request = {\n                        methodname: 'core_message_delete_conversation',\n                        args: {\n                            userid: this.messageArea.getCurrentUserId(),\n                            otheruserid: otherUserId\n                        }\n                    };\n\n                    // Delete the conversation.\n                    Ajax.call([request])[0].then(function() {\n                        // Clear the message area.\n                        this.messageArea.find(SELECTORS.MESSAGESAREA).empty();\n                        // Let the app know a conversation was deleted.\n                        this.messageArea.trigger(Events.CONVERSATIONDELETED, otherUserId);\n                        this._hideDeleteAction();\n                    }.bind(this)).catch(Notification.exception);\n                }.bind(this));\n\n                // Display the confirmation.\n                modal.show();\n            }.bind(this)).catch(Notification.exception);\n        };\n\n        /**\n         * Handles hiding the delete checkboxes and replacing the response area.\n         *\n         * @private\n         */\n        Messages.prototype._hideDeleteAction = function() {\n            this.messageArea.find(SELECTORS.MESSAGE)\n                .removeAttr('role')\n                .removeAttr('aria-checked');\n            this.messageArea.find(SELECTORS.MESSAGESAREA).removeClass('editing');\n        };\n\n        /**\n         * Triggers the CANCELDELETEMESSAGES event.\n         *\n         * @private\n         */\n        Messages.prototype._triggerCancelMessagesToDelete = function() {\n            // Trigger event letting other modules know message deletion was canceled.\n            this.messageArea.trigger(Events.CANCELDELETEMESSAGES);\n        };\n\n        /**\n         * Handles adding messages to the DOM.\n         *\n         * @param {array} messages An array of messages to be added to the DOM.\n         * @param {boolean} shouldScrollBottom True will scroll to the bottom of the message window and show the new messages.\n         * @return {Promise} The promise resolved when the messages have been added to the DOM.\n         * @private\n         */\n        Messages.prototype._addMessagesToDom = function(messages, shouldScrollBottom) {\n            var numberreceived = 0;\n            var messagesArea = this.messageArea.find(SELECTORS.MESSAGES);\n            messages = messages.filter(function(message) {\n                var id = \"\" + message.id + message.isread;\n                // If the message is already queued to be rendered, remove from the list of messages.\n                if (this._messageQueue[id]) {\n                    return false;\n                }\n                // Filter out any messages already rendered.\n                var result = messagesArea.find(SELECTORS.MESSAGE + '[data-id=\"' + id + '\"]');\n                // Any message we are rendering should go in the messageQueue.\n                if (!result.length) {\n                    this._messageQueue[id] = true;\n                }\n                return !result.length;\n            }.bind(this));\n            numberreceived = messages.length;\n            // We have the data - lets render the template with it.\n            return Templates.render('core_message/message_area_messages', {messages: messages}).then(function(html, js) {\n                // Check if we got something to do.\n                if (numberreceived > 0) {\n                    var newHtml = $('<div>' + html + '</div>');\n                    if (this._hasMatchingBlockTime(this.messageArea.node, newHtml, false)) {\n                        newHtml.find(SELECTORS.BLOCKTIME + ':first').remove();\n                    }\n                    // Show the new content.\n                    Templates.appendNodeContents(this.messageArea.find(SELECTORS.MESSAGES), newHtml, js);\n                    // Scroll the new message into view.\n                    if (shouldScrollBottom) {\n                        this._scrollBottom();\n                    }\n                    // Increment the number of messages displayed.\n                    this._numMessagesDisplayed += numberreceived;\n                    // Reset the poll timer because the user may be active.\n                    this._backoffTimer.restart();\n                }\n            }.bind(this));\n        };\n\n        /**\n         * Handles adding the last message to the DOM.\n         *\n         * @return {Promise} The promise resolved when the message has been added to the DOM.\n         * @private\n         */\n        Messages.prototype._addLastMessageToDom = function() {\n            // Call the web service to return how the message should look.\n            var promises = Ajax.call([{\n                methodname: 'core_message_data_for_messagearea_get_most_recent_message',\n                args: {\n                    currentuserid: this.messageArea.getCurrentUserId(),\n                    otheruserid: this._getUserId()\n                }\n            }]);\n\n            // Add the message.\n            return promises[0].then(function(data) {\n                return this._addMessagesToDom([data], true);\n            }.bind(this)).always(function() {\n                // Empty the response text area.text\n                this.messageArea.find(SELECTORS.SENDMESSAGETEXT).val('').trigger('input');\n            }.bind(this)).fail(Notification.exception);\n        };\n\n        /**\n         * Returns the ID of the other user in the conversation.\n         *\n         * @return {int} The user id\n         * @private\n         */\n        Messages.prototype._getUserId = function() {\n            return this.messageArea.find(SELECTORS.MESSAGES).data('userid');\n        };\n\n        /**\n         * Scrolls to the bottom of the messages.\n         *\n         * @private\n         */\n        Messages.prototype._scrollBottom = function() {\n            // Scroll to the bottom.\n            var messages = this.messageArea.find(SELECTORS.MESSAGES);\n            if (messages.length !== 0) {\n                messages.scrollTop(messages[0].scrollHeight);\n            }\n        };\n\n        /**\n         * Select the previous message in the list.\n         *\n         * @param {event} e The jquery event\n         * @param {object} data Extra event data\n         * @private\n         */\n        Messages.prototype._selectPreviousMessage = function(e, data) {\n            var currentMessage = $(e.target).closest(SELECTORS.MESSAGE);\n\n            do {\n                currentMessage = currentMessage.prev();\n            } while (currentMessage.length && !currentMessage.is(SELECTORS.MESSAGE));\n\n            currentMessage.focus();\n\n            data.originalEvent.preventDefault();\n            data.originalEvent.stopPropagation();\n        };\n\n        /**\n         * Select the next message in the list.\n         *\n         * @param {event} e The jquery event\n         * @param {object} data Extra event data\n         * @private\n         */\n        Messages.prototype._selectNextMessage = function(e, data) {\n            var currentMessage = $(e.target).closest(SELECTORS.MESSAGE);\n\n            do {\n                currentMessage = currentMessage.next();\n            } while (currentMessage.length && !currentMessage.is(SELECTORS.MESSAGE));\n\n            currentMessage.focus();\n\n            data.originalEvent.preventDefault();\n            data.originalEvent.stopPropagation();\n        };\n\n        /**\n         * Flag the response area as messaging.\n         *\n         * @param {event} e The jquery event\n         * @private\n         */\n        Messages.prototype._setMessaging = function(e) {\n            $(e.target).closest(SELECTORS.MESSAGERESPONSE).addClass('messaging');\n        };\n\n        /**\n         * Clear the response area as messaging flag.\n         *\n         * @param {event} e The jquery event\n         * @private\n         */\n        Messages.prototype._clearMessaging = function(e) {\n            $(e.target).closest(SELECTORS.MESSAGERESPONSE).removeClass('messaging');\n        };\n\n        /**\n         * Turn on delete message mode.\n         *\n         * @param {event} e The jquery event\n         * @private\n         */\n        Messages.prototype._startDeleting = function(e) {\n            var actions = new Actions(this.messageArea);\n            actions.chooseMessagesToDelete();\n\n            e.preventDefault();\n        };\n\n        /**\n         * Check if the message area is in editing mode.\n         *\n         * @return {bool}\n         * @private\n         */\n        Messages.prototype._isEditing = function() {\n            return this.messageArea.find(SELECTORS.MESSAGESAREA).hasClass('editing');\n        };\n\n        /**\n         * Check or uncheck the message if the message area is in editing mode.\n         *\n         * @param {event} e The jquery event\n         * @private\n         */\n        Messages.prototype._toggleMessage = function(e) {\n            if (!this._isEditing()) {\n                return;\n            }\n\n            var message = $(e.target).closest(SELECTORS.MESSAGE);\n\n            if (message.attr('aria-checked') === 'true') {\n                message.attr('aria-checked', 'false');\n            } else {\n                message.attr('aria-checked', 'true');\n            }\n        };\n\n        /**\n         * Adjust the height of the messages area to match the changed height of\n         * the response area.\n         *\n         * @private\n         */\n        Messages.prototype._adjustMessagesAreaHeight = function() {\n            var messagesArea = this.messageArea.find(SELECTORS.MESSAGES);\n            var messagesResponse = this.messageArea.find(SELECTORS.MESSAGERESPONSE);\n\n            var currentMessageResponseHeight = messagesResponse.outerHeight();\n            var diffResponseHeight = currentMessageResponseHeight - MESSAGES_RESPONSE_DEFAULT_HEIGHT;\n            var newMessagesAreaHeight = MESSAGES_AREA_DEFAULT_HEIGHT - diffResponseHeight;\n\n            messagesArea.outerHeight(newMessagesAreaHeight);\n        };\n\n        /**\n         * Handle the event that triggers sending a message from the messages area.\n         *\n         * @param {event} e The jquery event\n         * @param {object} data Additional event data\n         * @private\n         */\n        Messages.prototype._sendMessageHandler = function(e, data) {\n            data.originalEvent.preventDefault();\n\n            this._sendMessage();\n        };\n\n        /**\n         * Hide the messaging area. This only applies on smaller screen resolutions.\n         *\n         * @private\n         */\n        Messages.prototype._hideMessagingArea = function() {\n            this.messageArea.find(SELECTORS.MESSAGINGAREA)\n                .removeClass('show-messages')\n                .addClass('hide-messages');\n        };\n\n        /**\n         * Checks if a day separator needs to be removed.\n         *\n         * Example - scrolling up and loading previous messages that belong to the\n         * same day as the last message that was previously shown, meaning we can\n         * remove the original separator.\n         *\n         * @param {jQuery} domHtml The HTML in the DOM.\n         * @param {jQuery} newHtml The HTML to compare to the DOM\n         * @param {boolean} loadingPreviousMessages Are we loading previous messages?\n         * @return {boolean}\n         * @private\n         */\n        Messages.prototype._hasMatchingBlockTime = function(domHtml, newHtml, loadingPreviousMessages) {\n            var blockTime, blockTimePos, newBlockTime, newBlockTimePos;\n\n            if (loadingPreviousMessages) {\n                blockTimePos = ':first';\n                newBlockTimePos = ':last';\n            } else {\n                blockTimePos = ':last';\n                newBlockTimePos = ':first';\n            }\n\n            blockTime = domHtml.find(SELECTORS.BLOCKTIME + blockTimePos);\n            newBlockTime = newHtml.find(SELECTORS.BLOCKTIME + newBlockTimePos);\n\n            if (blockTime.length && newBlockTime.length) {\n                return blockTime.data('blocktime') == newBlockTime.data('blocktime');\n            }\n\n            return false;\n        };\n\n        return Messages;\n    }\n);\n"],"file":"message_area_messages.es6.min.js"}