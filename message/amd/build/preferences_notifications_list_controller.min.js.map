{"version":3,"sources":["../src/preferences_notifications_list_controller.js"],"names":["define","$","Ajax","Notification","CustomEvents","NotificationPreference","NotificationProcessorSettings","SELECTORS","DISABLE_NOTIFICATIONS","DISABLE_NOTIFICATIONS_CONTAINER","PREFERENCE","PREFERENCE_ROW","PREFERENCE_INPUT","PROCESSOR_SETTING","PreferencesController","element","root","userId","attr","registerEventListeners","prototype","isDisabled","hasClass","setDisabled","addClass","find","prop","setEnabled","removeClass","toggleDisableAllStatus","checkbox","container","ischecked","Deferred","resolve","request","methodname","args","userid","emailstop","call","done","bind","always","fail","exception","disabledNotificationsElement","events","activate","on","e","preferenceElement","target","closest","preferenceRow","preference","save","data","processorSettings","show","originalEvent","preventDefault"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls the preferences for the list of notification types on the\n * message preference page\n *\n * @module     core_message/preferences_notifications_list_controller\n * @class      preferences_notifications_list_controller\n * @package    message\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/ajax', 'core/notification', 'core/custom_interaction_events', 'core_message/notification_preference',\n        'core_message/notification_processor_settings'],\n        function($, Ajax, Notification, CustomEvents, NotificationPreference, NotificationProcessorSettings) {\n\n    var SELECTORS = {\n        DISABLE_NOTIFICATIONS: '[data-region=\"disable-notification-container\"] [data-disable-notifications]',\n        DISABLE_NOTIFICATIONS_CONTAINER: '[data-region=\"disable-notification-container\"]',\n        PREFERENCE: '[data-state]',\n        PREFERENCE_ROW: '[data-region=\"preference-row\"]',\n        PREFERENCE_INPUT: '[data-state] input',\n        PROCESSOR_SETTING: '[data-processor-setting]',\n    };\n\n    /**\n     * Constructor for the PreferencesController.\n     *\n     * @param {object} element jQuery object root element of the preference\n     */\n    var PreferencesController = function(element) {\n        this.root = $(element);\n        this.userId = this.root.attr('data-user-id');\n\n        this.registerEventListeners();\n    };\n\n    /**\n     * Check if the preferences are all disabled.\n     *\n     * @method isDisabled\n     * @return {bool}\n     */\n    PreferencesController.prototype.isDisabled = function() {\n        return this.root.hasClass('disabled');\n    };\n\n    /**\n     * Disable all of the preferences.\n     *\n     * @method setDisabled\n     */\n    PreferencesController.prototype.setDisabled = function() {\n        this.root.addClass('disabled');\n        this.root.find(SELECTORS.PREFERENCE_INPUT).prop('disabled', true);\n    };\n\n    /**\n     * Enable all of the preferences.\n     *\n     * @method setEnabled\n     */\n    PreferencesController.prototype.setEnabled = function() {\n        this.root.removeClass('disabled');\n        this.root.find(SELECTORS.PREFERENCE_INPUT).prop('disabled', false);\n    };\n\n    /**\n      * Update the disable all notifications user property in the DOM and\n      * send a request to update on the server.\n      *\n      * @method toggleDisableAllStatus\n      * @return {Promise}\n      */\n    PreferencesController.prototype.toggleDisableAllStatus = function() {\n        var checkbox = $(SELECTORS.DISABLE_NOTIFICATIONS);\n        var container = $(SELECTORS.DISABLE_NOTIFICATIONS_CONTAINER);\n        var ischecked = checkbox.prop('checked');\n\n        if (container.hasClass('loading')) {\n            return $.Deferred().resolve();\n        }\n\n        container.addClass('loading');\n\n        var request = {\n            methodname: 'core_user_update_user_preferences',\n            args: {\n                userid: this.userId,\n                emailstop: ischecked ? 1 : 0,\n            }\n        };\n\n        return Ajax.call([request])[0]\n            .done(function() {\n                if (ischecked) {\n                    this.setDisabled();\n                } else {\n                    this.setEnabled();\n                }\n            }.bind(this))\n            .always(function() {\n                container.removeClass('loading');\n            })\n            .fail(Notification.exception);\n    };\n\n    /**\n      * Set up all of the event listeners for the PreferencesController.\n      *\n      * @method registerEventListeners\n      */\n    PreferencesController.prototype.registerEventListeners = function() {\n        var disabledNotificationsElement = $(SELECTORS.DISABLE_NOTIFICATIONS);\n\n        CustomEvents.define(this.root, [\n            CustomEvents.events.activate,\n        ]);\n\n        this.root.on('change', function(e) {\n            if (!this.isDisabled()) {\n                var preferenceElement = $(e.target).closest(SELECTORS.PREFERENCE);\n                var preferenceRow = $(e.target).closest(SELECTORS.PREFERENCE_ROW);\n                var preference = new NotificationPreference(preferenceRow, this.userId);\n\n                preferenceElement.addClass('loading');\n                preference.save().always(function() {\n                    preferenceElement.removeClass('loading');\n                });\n            }\n        }.bind(this));\n\n        this.root.on(CustomEvents.events.activate, SELECTORS.PROCESSOR_SETTING, function(e, data) {\n            var element = $(e.target).closest(SELECTORS.PROCESSOR_SETTING);\n            var processorSettings = new NotificationProcessorSettings(element);\n            processorSettings.show();\n            data.originalEvent.preventDefault();\n        });\n\n        CustomEvents.define(disabledNotificationsElement, [\n            CustomEvents.events.activate\n        ]);\n\n        disabledNotificationsElement.on(CustomEvents.events.activate, function() {\n            this.toggleDisableAllStatus();\n        }.bind(this));\n    };\n\n    return PreferencesController;\n});\n"],"file":"preferences_notifications_list_controller.min.js"}