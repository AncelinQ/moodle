{"version":3,"sources":["../src/main.js"],"names":["define","$","CoursesRepository","Templates","Notification","PubSub","CourseEvents","SELECTORS","COURSES_VIEW","COURSES_VIEW_CONTENT","getRecentCourses","userid","limit","getLastAccessedCourses","renderCourses","root","courses","length","render","nocoursesimgurl","attr","reloadContent","recentcoursesViewRoot","find","recentcoursesViewContent","coursesPromise","then","pagedContentPromise","html","js","replaceNodeContents","catch","exception","registerEventListeners","subscribe","favourited","unfavorited","init"],"mappings":"AAwBAA,MAAM,sCACF,CACI,QADJ,CAEI,wBAFJ,CAGI,gBAHJ,CAII,mBAJJ,CAKI,aALJ,CAMI,oBANJ,CADE,CASF,SACIC,CADJ,CAEIC,CAFJ,CAGIC,CAHJ,CAIIC,CAJJ,CAKIC,CALJ,CAMIC,CANJ,CAOE,IAEMC,CAAAA,CAAS,CAAG,CACZC,YAAY,CAAE,gDADF,CAEZC,oBAAoB,CAAE,wDAFV,CAFlB,CAiBMC,CAAgB,CAAG,SAASC,CAAT,CAAiBC,CAAjB,CAAwB,CAC3C,MAAOV,CAAAA,CAAiB,CAACW,sBAAlB,CAAyCF,CAAzC,CAAiDC,CAAjD,CACV,CAnBH,CA6BME,CAAa,CAAG,SAASC,CAAT,CAAeC,CAAf,CAAwB,CACxC,GAAqB,CAAjB,CAAAA,CAAO,CAACC,MAAZ,CAAwB,CACpB,MAAOd,CAAAA,CAAS,CAACe,MAAV,CAAiB,0CAAjB,CAA6D,CAChEF,OAAO,CAAEA,CADuD,CAA7D,CAGV,CAJD,IAIO,CACH,GAAIG,CAAAA,CAAe,CAAGJ,CAAI,CAACK,IAAL,CAAU,sBAAV,CAAtB,CACA,MAAOjB,CAAAA,CAAS,CAACe,MAAV,CAAiB,0CAAjB,CAA6D,CAChEC,eAAe,CAAEA,CAD+C,CAA7D,CAGV,CACJ,CAxCH,CAiDME,CAAa,CAAG,SAASV,CAAT,CAAiBI,CAAjB,CAAuB,IAEnCO,CAAAA,CAAqB,CAAGP,CAAI,CAACQ,IAAL,CAAUhB,CAAS,CAACC,YAApB,CAFW,CAGnCgB,CAAwB,CAAGT,CAAI,CAACQ,IAAL,CAAUhB,CAAS,CAACE,oBAApB,CAHQ,CAKnCgB,CAAc,CAAGf,CAAgB,CAACC,CAAD,CA/CjB,EA+CiB,CALE,CAOvC,MAAOc,CAAAA,CAAc,CAACC,IAAf,CAAoB,SAASV,CAAT,CAAkB,CACzC,GAAIW,CAAAA,CAAmB,CAAGb,CAAa,CAACQ,CAAD,CAAwBN,CAAxB,CAAvC,CAEAW,CAAmB,CAACD,IAApB,CAAyB,SAASE,CAAT,CAAeC,CAAf,CAAmB,CACxC,MAAO1B,CAAAA,CAAS,CAAC2B,mBAAV,CAA8BN,CAA9B,CAAwDI,CAAxD,CAA8DC,CAA9D,CACV,CAFD,EAEGE,KAFH,CAES3B,CAAY,CAAC4B,SAFtB,EAGA,MAAOP,CAAAA,CACV,CAPM,EAOJM,KAPI,CAOE3B,CAAY,CAAC4B,SAPf,CAQV,CAhEH,CAwEMC,CAAsB,CAAG,SAAStB,CAAT,CAAiBI,CAAjB,CAAuB,CAChDV,CAAM,CAAC6B,SAAP,CAAiB5B,CAAY,CAAC6B,UAA9B,CAA0C,UAAW,CACjDd,CAAa,CAACV,CAAD,CAASI,CAAT,CAChB,CAFD,EAIAV,CAAM,CAAC6B,SAAP,CAAiB5B,CAAY,CAAC8B,WAA9B,CAA2C,UAAW,CAClDf,CAAa,CAACV,CAAD,CAASI,CAAT,CAChB,CAFD,CAGH,CAhFH,CA+FE,MAAO,CACHsB,IAAI,CARG,QAAPA,CAAAA,CAAO,CAAS1B,CAAT,CAAiBI,CAAjB,CAAuB,CAC9BA,CAAI,CAAGd,CAAC,CAACc,CAAD,CAAR,CAEAkB,CAAsB,CAACtB,CAAD,CAASI,CAAT,CAAtB,CACAM,CAAa,CAACV,CAAD,CAASI,CAAT,CAChB,CAEM,CAGV,CAlHC,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to initialise the Recently accessed courses block.\n *\n * @module     block_recentlyaccessedcourses/main.js\n * @package    block_recentlyaccessedcourses\n * @copyright  2018 Victor Deniz <victor@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(\n    [\n        'jquery',\n        'core_course/repository',\n        'core/templates',\n        'core/notification',\n        'core/pubsub',\n        'core_course/events'\n    ],\n    function(\n        $,\n        CoursesRepository,\n        Templates,\n        Notification,\n        PubSub,\n        CourseEvents\n    ) {\n\n        var SELECTORS = {\n            COURSES_VIEW: '[data-region=\"recentlyaccessedcourses-view\"]',\n            COURSES_VIEW_CONTENT: '[data-region=\"recentlyaccessedcourses-view-content\"]'\n        };\n\n        var NUM_COURSES_TOTAL = 10;\n\n        /**\n         * Get enrolled courses from backend.\n         *\n         * @method getRecentCourses\n         * @param {int} userid User from which the courses will be obtained\n         * @param {int} limit Only return this many results\n         * @return {array} Courses user has accessed\n         */\n        var getRecentCourses = function(userid, limit) {\n            return CoursesRepository.getLastAccessedCourses(userid, limit);\n        };\n\n        /**\n         * Render the dashboard courses.\n         *\n         * @method renderCourses\n         * @param {object} root The root element for the courses view.\n         * @param {array} courses containing array of returned courses.\n         * @return {promise} Resolved with HTML and JS strings\n         */\n        var renderCourses = function(root, courses) {\n            if (courses.length > 0) {\n                return Templates.render('block_recentlyaccessedcourses/view-cards', {\n                    courses: courses\n                });\n            } else {\n                var nocoursesimgurl = root.attr('data-nocoursesimgurl');\n                return Templates.render('block_recentlyaccessedcourses/no-courses', {\n                    nocoursesimgurl: nocoursesimgurl\n                });\n            }\n        };\n\n        /**\n         * Fetch user's recently accessed courses and reload the content of the block.\n         *\n         * @param {int} userid User whose courses will be shown\n         * @param {object} root The root element for the recentlyaccessedcourses view.\n         * @returns {promise} The updated content for the block.\n         */\n        var reloadContent = function(userid, root) {\n\n            var recentcoursesViewRoot = root.find(SELECTORS.COURSES_VIEW);\n            var recentcoursesViewContent = root.find(SELECTORS.COURSES_VIEW_CONTENT);\n\n            var coursesPromise = getRecentCourses(userid, NUM_COURSES_TOTAL);\n\n            return coursesPromise.then(function(courses) {\n                var pagedContentPromise = renderCourses(recentcoursesViewRoot, courses);\n\n                pagedContentPromise.then(function(html, js) {\n                    return Templates.replaceNodeContents(recentcoursesViewContent, html, js);\n                }).catch(Notification.exception);\n                return coursesPromise;\n            }).catch(Notification.exception);\n        };\n\n        /**\n         * Register event listeners for the block.\n         *\n         * @param {int} userid User whose courses will be shown\n         * @param {object} root The root element for the recentlyaccessedcourses block.\n         */\n        var registerEventListeners = function(userid, root) {\n            PubSub.subscribe(CourseEvents.favourited, function() {\n                reloadContent(userid, root);\n            });\n\n            PubSub.subscribe(CourseEvents.unfavorited, function() {\n                reloadContent(userid, root);\n            });\n        };\n\n        /**\n         * Get and show the recent courses into the block.\n         *\n         * @param {int} userid User from which the courses will be obtained\n         * @param {object} root The root element for the recentlyaccessedcourses block.\n         */\n        var init = function(userid, root) {\n            root = $(root);\n\n            registerEventListeners(userid, root);\n            reloadContent(userid, root);\n        };\n\n        return {\n            init: init\n        };\n    });\n"],"file":"main.min.js"}