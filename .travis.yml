# PLEASE NOTE: Travis is not currently utilised by the Moodle core integration
# process (which uses our internal CI system) this file is here for the benefit
# of community developers git clones - see MDL-51458.

sudo: required

# We currently disable Travis notifications entirely until https://github.com/travis-ci/travis-ci/issues/4976
# is fixed.
notifications:
  email: false

services:
    - docker
# Redis tests are currently failing on php 7.2 due to https://bugs.php.net/bug.php?id=75628
#     - redis-server

env:
    # Although we want to run these jobs and see failures as quickly as possible, we also want to get the slowest job to
    # start first so that the total run time is not too high.
    #
    # We only run MySQL on PHP 7.2, so run that first.
    # CI Tests should be second-highest in priority as these only take <= 60 seconds to run under normal circumstances.
    # Postgres is significantly is pretty reasonable in its run-time.

    # Run unit tests on MySQL
    - DB=mysqli   TASK=PHPUNIT PHP=7.2

    # Run CI Tests without running PHPUnit.
    - DB=none     TASK=CITEST

    # Run unit tests on Postgres
    - DB=pgsql    TASK=PHPUNIT PHP=7.1
    - DB=pgsql    TASK=PHPUNIT PHP=7.2

    # Perform an upgrade test too.
    - DB=pgsql    TASK=UPGRADE PHP=7.2

    - TASK=GRUNT

matrix:
    # Enable fast finish.
    # This will fail the build if a single job fails (except those in allow_failures).
    # It will not stop the jobs from running.
    fast_finish: true

cache:
    directories:
      - $HOME/.composer/cache
      - $HOME/.npm

install:
    - docker network create testing
    - >
        if [ "$DB" = 'mysqli' ];
        then
            docker run \
                --rm \
                --detach \
                --name db \
                --network testing \
                -e MYSQL_ROOT_PASSWORD="" \
                -e MYSQL_USER="travis" \
                -e MYSQL_PASSWORD="" \
                -e MYSQL_ALLOW_EMPTY_PASSWORD=yes \
                --tmpfs /var/lib/mysql:rw \
                mysql:5\
                --character-set-server=utf8mb4 \
                --collation-server=utf8mb4_bin \
                --innodb_file_format=barracuda \
                --innodb_file_per_table=On \
                --innodb_large_prefix=On \
                --key_buffer_size=768M \
                --table_open_cache=12000
        fi
    - >
        if [ "$DB" = 'pgsql' ];
        then

            docker run \
              --rm \
              --detach \
              --name db \
              --network testing \
              --shm-size=256MB \
              -e POSTGRES_USER=moodle \
              -e POSTGRES_PASSWORD=moodle \
              -e POSTGRES_DB=initial \
              -c 'shared_buffers = 2GB' \
              -c 'work_mem = 128MB' \
              -c 'maintenance_work_mem = 256MB' \
              -c 'effective_cache_size = 4GB ' \
              -c 'synchronous_commit = off' \
              -c 'checkpoint_completion_target = 0.9' \
              -c 'fsync = off' \
              -c 'full_page_writes = off' \
              -c 'bgwriter_lru_maxpages = 0' \
              --tmpfs /var/lib/postgresql/data:rw \
              postgres:9.6.7-alpine ;

            # Wait few sec, before executing commands.
            sleep 10 ;

            # Create dbs.
            docker exec db psql -U postgres -c "CREATE DATABASE travis_ci_test WITH OWNER postgres ENCODING 'UTF8' LC_COLLATE='en_US.utf8' LC_CTYPE='en_US.utf8' TEMPLATE=template0;"
        fi
    - >
        if [ "$TASK" = 'PHPUNIT' ];
        then
            docker run \
              --rm \
              --detach \
              --name runner \
              --network testing \
              -v "${HOME}/.composer:/var/www/.composer:rw" \
              --tmpfs /srv/moodledata \
              moodlehq/moodle-php-apache:${PHP_VERSION}}

            # Enable Redis.
            # Redis tests are currently failing on php 7.2 due to https://bugs.php.net/bug.php?id=75628
            # echo 'extension="redis.so"' > /tmp/redis.ini
            # phpenv config-add /tmp/redis.ini
        fi

    - >
        if [ "$TASK" = 'GRUNT' ];
        then
            docker pull node:8-slim;
        fi

before_script:
    - phpenv config-rm xdebug.ini
    - >
      if [ "$TASK" = 'PHPUNIT' -o "$TASK" = 'UPGRADE' ];
      then
        # Copy generic configuration in place.
        cp config-dist.php config.php ;

        # Create the moodledata directory.
        mkdir -p "$HOME"/roots/base

        # The database name and password.
        sed -i \
          -e "s%= 'moodle'%= 'travis_ci_test'%" \
          -e "s%= 'localhost'%= 'db'%" \
          -e "s%= 'password'%= ''%" \
          config.php ;

        # The wwwroot and dataroot.
        sed -i \
          -e "s%http://example.com/moodle%https://runner%" \
          -e "s%/home/example/moodledata%/srv/moodledata%" \
          config.php ;

        if [ "$DB" = 'mysqli' ];
        then
          # MySQL-specific setup.
          sed -i \
            -e "s%= 'pgsql'%= 'mysqli'%" \
            -e "s%= 'username'%= 'travis'%" \
            -e "s%=> 'utf8mb4_unicode_ci'%=> 'utf8mb4_bin'%" \
            config.php;

          docker exec db bash -c "mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;'" ;
        fi
      fi

    - >
      if [ "$TASK" = 'PHPUNIT' ];
      then
        # Create a directory for the phpunit dataroot.
        mkdir -p "$HOME"/roots/phpunit

        # The phpunit dataroot and prefix..
        # Redis tests are currently failing on php 7.2 due to https://bugs.php.net/bug.php?id=75628
        # -e "/require_once/i \\define('TEST_SESSION_REDIS_HOST', '127.0.0.1');" \
        sed -i \
          -e "/require_once/i \\\$CFG->phpunit_dataroot = '\/home\/travis\/roots\/phpunit';" \
          -e "/require_once/i \\\$CFG->phpunit_prefix = 'p_';" \
          config.php ;

        # Initialise PHPUnit for Moodle.
        docker run runner bash -c 'php admin/tool/phpunit/cli/init.php'
      fi

    - >
      if [ "$TASK" = 'GRUNT' ];
      then
          docker run -v `pwd`:/srv -w /srv -v "${HOME}/.npm":/root/.npm node:8-slim npm install --no-spin;
      fi

    ########################################################################
    # CI Tests
    ########################################################################
    - >
      if [ "$TASK" = 'CITEST' ];
      then
        # Note - this is deliberately placed in the script section as we
        # should not add any code until after phpunit has run.

        # The following repositories are required.
        # The local_ci repository does the actual checking.
        git clone https://github.com/moodlehq/moodle-local_ci.git local/ci

        # We need the official upstream for comparison
        git remote add upstream https://github.com/moodle/moodle.git;

        git fetch upstream master;
        export GIT_PREVIOUS_COMMIT="`git merge-base FETCH_HEAD $TRAVIS_COMMIT`";
        export GIT_COMMIT="$TRAVIS_COMMIT";
        export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`

        # Variables required by our linter.
        export gitcmd=`which git`;
        export gitdir="$TRAVIS_BUILD_DIR";
        export phpcmd=`which php`;
      fi

    ########################################################################
    # Upgrade test
    ########################################################################
    - >
      if [ "$TASK" = 'UPGRADE' ];
      then
        # We need the official upstream.
        git remote add upstream https://github.com/moodle/moodle.git;

        # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)
        git fetch upstream MOODLE_30_STABLE;
        git checkout MOODLE_30_STABLE;

        # Perform the upgrade
        docker run runner bash -c 'php
            admin/cli/install_database.php
                --agree-license
                --adminpass=Password
                --adminemail=admin@example.com
                --fullname="Upgrade test"
                --shortname=Upgrade' ;

        # Return to the previous commit
        git checkout -;

        # Perform the upgrade
        docker run runner bash -c 'php
            admin/cli/upgrade.php
                --non-interactive
                --allow-unstable' ;

        # The local_ci repository can be used to check upgrade savepoints.
        git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;
      fi

script:
    - docker ps -a
    - >
      if [ "$TASK" = 'PHPUNIT' ];
      then
        docker run runner bash -c 'vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose' ;
      fi

    - >
      if [ "$TASK" = 'CITEST' ];
      then
        bash local/ci/php_lint/php_lint.sh;
      fi

    - >
      if [ "$TASK" = 'GRUNT' ];
      then
          docker run -w /srv -v `pwd`:/srv -v "${HOME}/.npm":/root/.npm node:8-slim bash -c 'npm install --no-spin -g grunt && grunt';
          # Add all files to the git index and then run diff --cached to see all changes.
          # This ensures that we get the status of all files, including new files.
          # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.
          git add . ;
          git reset -- npm-shrinkwrap.json ;
          git diff --cached --exit-code ;
      fi

    ########################################################################
    # Upgrade test
    ########################################################################
    - >
      if [ "$TASK" = 'UPGRADE' ];
      then
        cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php
        result=`docker run runner bash -c 'php check_upgrade_savepoints.php'`;
        # Check if there are problems
        count=`echo "$result" | grep -P "ERROR|WARN" | wc -l` ;
        if (($count > 0));
        then
          echo "$result"
          exit 1 ;
        fi
      fi
