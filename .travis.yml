sudo: false

language: php

php:
    # Moodle supports versions 5.5, and 5.6 of PHP.
    - 5.5
    - 5.6

    # We hope to offer PHP 7 support in the near future.
    - nightly

env:
    # Run unit tests on MySQL
    - DB=mysqli   PHPUNIT=true    INSTALL=false   CITEST=false

    # Run unit tests on Postgres
    - DB=pgsql    PHPUNIT=true    INSTALL=false   CITEST=false

    # Run CI Tests without running PHPUnit.
    - DB=none     PHPUNIT=false   INSTALL=false   CITEST=true

matrix:
  # Enable fast finish.
  # This will fail the build if a single job fails (except those in allow_failures).
  # It will not stop the jobs from running.
  fast_finish: true

  # Always allow failure on nightly.
  # It's a nightly build and failures can happen.
  allow_failures:
    - php: nightly

  exclude:
    # PHP 7 is not yet supported for actual runs.
    # Exclude it by default - we include it for CITEST only later.
    - php: nightly

  include:
    # Still have a go at running the CITEST set on PHP 7.
    - php: nightly
      env: DB=none     PHPUNIT=false   INSTALL=false   CITEST=true

cache:
    directories:
      - $HOME/.composer/cache

install:
    - mkdir -p "$HOME"/roots/{base,phpunit}
    - travis_retry composer install --prefer-dist --no-interaction

before_script:
    - >
      if [ "$INSTALL" = 'true' -o "$PHPUNIT" = 'true' ];
      then
        # Copy generic configuration in place.
        cp config-dist.php config.php ;

        # The database name and password.
        sed -i \
          -e "s%= 'moodle'%= 'travis_ci_test'%" \
          -e "s%= 'password'%= ''%" \
          config.php ;

        # The wwwroot and dataroot.
        sed -i \
          -e "s%http://example.com/moodle%http://localhost%" \
          -e "s%/home/example/moodledata%/home/travis/roots/base%" \
          config.php ;

        if [ "$DB" = 'pgsql' ];
        then
          # Postgres-specific setup.
          sed -i \
            -e "s%= 'username'%= 'postgres'%" \
            config.php ;

          psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;
        fi

        if [ "$DB" = 'mysqli' ];
        then
          # MySQL-specific setup.
          sed -i \
            -e "s%= 'pgsql'%= 'mysqli'%" \
            -e "s%= 'username'%= 'travis'%" \
            config.php;

          mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;
          mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;
          mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_bin;' ;
        fi

        if [ "$PHPUNIT" = 'true' ];
        then
          # The phpunit dataroot and prefix..
          sed -i \
            -e "/require_once/i \\\$CFG->phpunit_dataroot = '\/home\/travis\/roots\/phpunit';" \
            -e "/require_once/i \\\$CFG->phpunit_prefix = 'p_';" \
            config.php ;

          # Initialise PHPUnit for Moodle.
          php admin/tool/phpunit/cli/init.php
        fi
      fi

    # Install npm dependencies too for CI tests.
    # This will be required for moodle-local_ci.
    #- >
    #  if [ "$CITEST" = 'true' ];
    #  then
    #    npm install;
    #  fi

script:
    ########################################################################
    # PHPUnit
    ########################################################################
    - >
      if [ "$PHPUNIT" = 'true' ];
      then
        vendor/bin/phpunit;
      fi

    ########################################################################
    # CI Tests
    ########################################################################
    - >
      if [ "$CITEST" = 'true' ];
      then
        # Note - this is deliberately placed in the script section as we
        # should not add any code until after phpunit has run.

        # The following repositories are required.
        # The local_ci repository does the actual checking.
        git clone https://github.com/moodlehq/moodle-local_ci.git local/ci

        # We may want to invoke the codechcker and doc checker some day soon.
        #git clone git://github.com/moodlehq/moodle-local_codechecker.git local/codechecker;
        #git clone https://github.com/moodlehq/moodle-local_moodlecheck.git local/moodlecheck;

        # We need the official upstream for comparison
        git remote add upstream https://github.com/moodle/moodle.git;
        git fetch upstream master;
        export GIT_PREVIOUS_COMMIT="`git merge-base FETCH_HEAD $TRAVIS_COMMIT`";
        export GIT_COMMIT="$TRAVIS_COMMIT";
        export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`

        # Variables required by our linter.
        export gitcmd=`which git`;
        export gitdir="$TRAVIS_BUILD_DIR";
        export phpcmd=`which php`;
      fi

    - >
      if [ "$CITEST" = "true" -a "$GIT_PREVIOUS_COMMIT" != "$UPSTREAM_FETCH_HEAD" ];
      then
        # This is a CI test, but it is based on an older weekly release.
        # Warn in a way that will fail the test.
        echo "Current commit is based on an older weekly release" && false;
      fi

    # Actually run the CI Tests - do this outside of the main test to make output clearer.
    - >
      if [ "$CITEST" = 'true' ];
      then
        bash local/ci/php_lint/php_lint.sh;
      fi
