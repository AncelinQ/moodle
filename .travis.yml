# PLEASE NOTE: Travis is not currently utilised by the Moodle core integration
# process (which uses our internal CI system) this file is here for the benefit
# of community developers git clones - see MDL-51458.

os:
  - osx

env:
    # Run CI Tests without running PHPUnit.
    - DB=none     PHPUNIT=false   INSTALL=false   CITEST=true

    # Run unit tests on Postgres
    - DB=pgsql    PHPUNIT=true    INSTALL=false   CITEST=false

# We currently disable Travis notifications entirely until https://github.com/travis-ci/travis-ci/issues/4976
# is fixed.
notifications:
  email: false

cache:
    directories:
      - $HOME/.composer/cache
      - /usr/local/Cellar

before_install:
    - brew update
    - brew tap homebrew/php
    - brew install php70 php70-intl php70-mcrypt php70-imagick
    - curl https://getcomposer.org/installer > composer-setup.php
    - php composer-setup.php
    - sudo mv composer.phar /usr/local/bin/composer

install:
    # Install composer dependencies.
    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.
    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.
    - travis_retry composer install --prefer-dist --no-interaction

before_script:
    - >
      if [ "$INSTALL" = 'true' -o "$PHPUNIT" = 'true' ];
      then
        # Copy generic configuration in place.
        cp config-dist.php config.php ;

        # Create the moodledata directory.
        mkdir -p "$HOME"/roots/base

        # The database name and password.
        sed -i \
          -e "s%= 'moodle'%= 'travis_ci_test'%" \
          -e "s%= 'password'%= ''%" \
          config.php ;

        # The wwwroot and dataroot.
        sed -i \
          -e "s%http://example.com/moodle%http://localhost%" \
          -e "s%/home/example/moodledata%/home/travis/roots/base%" \
          config.php ;

        if [ "$DB" = 'pgsql' ];
        then
          # Postgres-specific setup.
          sed -i \
            -e "s%= 'username'%= 'postgres'%" \
            config.php ;

          psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;
        fi

        if [ "$DB" = 'mysqli' ];
        then
          # MySQL-specific setup.
          sed -i \
            -e "s%= 'pgsql'%= 'mysqli'%" \
            -e "s%= 'username'%= 'travis'%" \
            config.php;

          mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;
          mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;
          mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_bin;' ;
        fi

        if [ "$PHPUNIT" = 'true' ];
        then
          # Create a directory for the phpunit dataroot.
          mkdir -p "$HOME"/roots/phpunit

          # The phpunit dataroot and prefix..
          sed -i \
            -e "/require_once/i \\\$CFG->phpunit_dataroot = '\/home\/travis\/roots\/phpunit';" \
            -e "/require_once/i \\\$CFG->phpunit_prefix = 'p_';" \
            config.php ;

          # Initialise PHPUnit for Moodle.
          php admin/tool/phpunit/cli/init.php
        fi
      fi

script:
    ########################################################################
    # PHPUnit
    ########################################################################
    - >
      if [ "$PHPUNIT" = 'true' ];
      then
        vendor/bin/phpunit;
      fi

    ########################################################################
    # CI Tests
    ########################################################################
    - >
      if [ "$CITEST" = 'true' ];
      then
        # Note - this is deliberately placed in the script section as we
        # should not add any code until after phpunit has run.

        # The following repositories are required.
        # The local_ci repository does the actual checking.
        git clone https://github.com/moodlehq/moodle-local_ci.git local/ci

        # We need the official upstream for comparison
        git remote add upstream https://github.com/moodle/moodle.git;

        git fetch upstream master;
        export GIT_PREVIOUS_COMMIT="`git merge-base FETCH_HEAD $TRAVIS_COMMIT`";
        export GIT_COMMIT="$TRAVIS_COMMIT";
        export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`

        # Variables required by our linter.
        export gitcmd=`which git`;
        export gitdir="$TRAVIS_BUILD_DIR";
        export phpcmd=`which php`;
      fi

    # Actually run the CI Tests - do this outside of the main test to make output clearer.
    - >
      if [ "$CITEST" = 'true' ];
      then
        bash local/ci/php_lint/php_lint.sh;
      fi

    ########################################################################
    # Upgrade test
    ########################################################################
    - >
      if [ "$UPGRADE" = 'true' ];
      then
        # We need the official upstream.
        git remote add upstream https://github.com/moodle/moodle.git;

        # Checkout 27 STABLE branch.
        git fetch upstream MOODLE_27_STABLE;
        git checkout MOODLE_27_STABLE;

        # Perform the upgrade
        php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname="Upgrade test" --shortname=Upgrade;

        # Return to the previous commit
        git checkout -;

        # Perform the upgrade
        php admin/cli/upgrade.php --non-interactive --allow-unstable ;

        # The local_ci repository can be used to check upgrade savepoints.
        git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;

        cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php
        result=`php check_upgrade_savepoints.php`;
        # Check if there are problems
        count=`echo "$result" | grep -P "ERROR|WARN" | wc -l` ;
        if (($count > 0));
        then
          echo "$result"
          exit 1 ;
        fi
      fi
