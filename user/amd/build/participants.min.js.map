{"version":3,"sources":["../src/participants.js"],"names":["Selectors","bulkActionSelect","bulkUserCheckBoxes","bulkUserSelectedCheckBoxes","checkCountButton","showCountText","showCountToggle","stateHelpIcon","tableForm","uniqueId","init","uniqueid","noteStateNames","root","document","querySelector","getTableFromUniqueId","DynamicTableSelectors","main","fromRegionId","registerEventListeners","addEventListener","CustomEvents","events","accessibleChange","e","action","target","value","indexOf","preventDefault","tableRoot","ids","querySelectorAll","forEach","checkbox","push","getAttribute","replace","showSendMessage","catch","Notification","exception","showAddNote","length","form","submit","resetBulkAction","showCountLink","showCountLinkClicked","contains","checkCountButtonClicked","DynamicTable","setPageSize","dataset","targetPageSize","then","checked","Events","tableContentRefreshed","defaultPageSize","parseInt","tableDefaultPerPage","currentPageSize","tablePageSize","totalRowCount","tableTotalRows","pageCountStrings","key","component","param","classList","add","remove","Str","get_strings","showingParticipantCountString","showCountString","selectCountString","showingParticipantCount","innerHTML","users","Promise","resolve","states","label","selected","context","stateNames","titlePromise","get_string","ModalFactory","create","type","types","SAVE_CANCEL","body","Templates","render","title","buttons","save","modal","getRoot","on","ModalEvents","hidden","bulkActionSelector","focus","submitAddNote","show","text","find","val","publishstate","notes","map","userid","courseid","courseId","Repository","createNotesForUsers","noteIds","msg","submitSendMessage","messages","touserid","sendMessagesToUsers","messageIds"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Some UI stuff for participants page.\n * This is also used by the report/participants/index.php because it has the same functionality.\n *\n * @module     core_user/participants\n * @package    core_user\n * @copyright  2017 Damyon Wiese\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as DynamicTable from 'core_table/dynamic';\nimport * as Repository from './repository';\nimport * as Str from 'core/str';\nimport DynamicTableSelectors from 'core_table/local/dynamic/selectors';\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport {add as notifyUser} from 'core/toast';\nimport CustomEvents from 'core/custom_interaction_events';\n\nconst Selectors = {\n    bulkActionSelect: \"#formactionid\",\n    bulkUserCheckBoxes: \"input.usercheckbox\",\n    bulkUserSelectedCheckBoxes: \"input.usercheckbox:checked\",\n    checkCountButton: \"#checkall\",\n    showCountText: '[data-region=\"participant-count\"]',\n    showCountToggle: '[data-action=\"showcount\"]',\n    stateHelpIcon: '[data-region=\"state-help-icon\"]',\n    tableForm: uniqueId => `form[data-table-unique-id=\"${uniqueId}\"]`,\n};\n\nexport const init = ({\n    uniqueid,\n    noteStateNames = {},\n}) => {\n    const root = document.querySelector(Selectors.tableForm(uniqueid));\n    const getTableFromUniqueId = uniqueId => root.querySelector(DynamicTableSelectors.main.fromRegionId(uniqueId));\n\n    /**\n     * Private method.\n     *\n     * @method registerEventListeners\n     * @private\n     */\n    const registerEventListeners = () => {\n        root.querySelector(Selectors.bulkActionSelect).addEventListener(CustomEvents.events.accessibleChange, e => {\n            const action = e.target.value;\n\n            if (action.indexOf('#') !== -1) {\n                e.preventDefault();\n\n                const tableRoot = getTableFromUniqueId(uniqueid);\n                const ids = [];\n                tableRoot.querySelectorAll(Selectors.bulkUserSelectedCheckBoxes).forEach(checkbox => {\n                    ids.push(checkbox.getAttribute('name').replace('user', ''));\n                });\n\n                if (action === '#messageselect') {\n                    showSendMessage(ids).catch(Notification.exception);\n                } else if (action === '#addgroupnote') {\n                    showAddNote(ids).catch(Notification.exception);\n                }\n            } else if (action !== '') {\n                const tableRoot = getTableFromUniqueId(uniqueid);\n                if (tableRoot.querySelectorAll(Selectors.bulkUserSelectedCheckBoxes).length) {\n                    e.target.form().submit();\n                }\n            }\n\n            resetBulkAction(e.target);\n        });\n\n        root.addEventListener('click', e => {\n            // Handle clicking of the \"Show [all|count]\" and \"Select all\" actions.\n            const showCountLink = root.querySelector(Selectors.showCountToggle);\n            const checkCountButton = root.querySelector(Selectors.checkCountButton);\n\n            const showCountLinkClicked = showCountLink && showCountLink.contains(e.target);\n            const checkCountButtonClicked = checkCountButton && checkCountButton.contains(e.target);\n\n            if (showCountLinkClicked || checkCountButtonClicked) {\n                e.preventDefault();\n\n                const tableRoot = getTableFromUniqueId(uniqueid);\n\n                DynamicTable.setPageSize(tableRoot, showCountLink.dataset.targetPageSize)\n                .then(tableRoot => {\n                    if (checkCountButtonClicked) {\n                        tableRoot.querySelectorAll(Selectors.bulkUserCheckBoxes).forEach(checkbox => {\n                            checkbox.checked = true;\n                        });\n                    }\n\n                    return tableRoot;\n                })\n                .catch(Notification.exception);\n            }\n        });\n\n        // When the content is refreshed, updat the row counts in various places.\n        root.addEventListener(DynamicTable.Events.tableContentRefreshed, e => {\n            const showCountLink = root.querySelector(Selectors.showCountToggle);\n            const checkCountButton = root.querySelector(Selectors.checkCountButton);\n\n            const tableRoot = e.target;\n\n            const defaultPageSize = parseInt(root.dataset.tableDefaultPerPage, 10);\n            const currentPageSize = parseInt(tableRoot.dataset.tablePageSize, 10);\n            const totalRowCount = parseInt(tableRoot.dataset.tableTotalRows, 10);\n\n            const pageCountStrings = [\n                {\n                    key: 'countparticipantsfound',\n                    component: 'core_user',\n                    param: totalRowCount,\n                },\n            ];\n\n\n            if (totalRowCount <= defaultPageSize) {\n                // There are fewer than the default page count numbers of rows.\n                showCountLink.classList.add('hidden');\n                checkCountButton.classList.add('hidden');\n            } else if (totalRowCount <= currentPageSize) {\n                // The are fewer than the current page size.\n                pageCountStrings.push({\n                    key: 'showperpage',\n                    component: 'core',\n                    param: defaultPageSize,\n                });\n\n                pageCountStrings.push({\n                    key: 'selectalluserswithcount',\n                    component: 'core',\n                    param: defaultPageSize,\n                });\n\n                // Show the 'Show [x]' link.\n                showCountLink.classList.remove('hidden');\n                showCountLink.dataset.targetPageSize = defaultPageSize;\n\n                // The 'Check all [x]' button is only visible when there are values to set.\n                checkCountButton.classList.add('hidden');\n            } else {\n                pageCountStrings.push({\n                    key: 'showall',\n                    component: 'core',\n                    param: totalRowCount,\n                });\n\n                pageCountStrings.push({\n                    key: 'selectalluserswithcount',\n                    component: 'core',\n                    param: totalRowCount,\n                });\n\n                // Show both the 'Show [x]' link, and the 'Check all [x]' button.\n                showCountLink.classList.remove('hidden');\n                showCountLink.dataset.targetPageSize = totalRowCount;\n                checkCountButton.classList.remove('hidden');\n            }\n\n            Str.get_strings(pageCountStrings)\n            .then(([showingParticipantCountString, showCountString, selectCountString]) => {\n                const showingParticipantCount = root.querySelector(Selectors.showCountText);\n                showingParticipantCount.innerHTML = showingParticipantCountString;\n\n                if (showCountString) {\n                    showCountLink.innerHTML = showCountString;\n                }\n\n                if (selectCountString) {\n                    checkCountButton.value = selectCountString;\n                }\n\n                return;\n            })\n            .catch(Notification.exception);\n        });\n    };\n\n    const resetBulkAction = bulkActionSelect => {\n        bulkActionSelect.value = '';\n    };\n\n    /**\n     * Show the add note popup\n     *\n     * @param {int[]} users\n     * @return {Promise}\n     */\n    const showAddNote = users => {\n        if (!users.length) {\n            // No users were selected.\n            return Promise.resolve();\n        }\n\n        const states = [];\n        for (let key in noteStateNames) {\n            switch (key) {\n                case 'draft':\n                    states.push({value: 'personal', label: noteStateNames[key]});\n                    break;\n                case 'public':\n                    states.push({value: 'course', label: noteStateNames[key], selected: 1});\n                    break;\n                case 'site':\n                    states.push({value: key, label: noteStateNames[key]});\n                    break;\n            }\n        }\n\n        const context = {\n            stateNames: states,\n            stateHelpIcon: root.querySelector(Selectors.stateHelpIcon).innerHTML,\n        };\n\n        let titlePromise = null;\n        if (users.length === 1) {\n            titlePromise = Str.get_string('addbulknotesingle', 'core_notes');\n        } else {\n            titlePromise = Str.get_string('addbulknote', 'core_notes', users.length);\n        }\n\n        return ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            body: Templates.render('core_user/add_bulk_note', context),\n            title: titlePromise,\n            buttons: {\n                save: titlePromise,\n            },\n        })\n        .then(modal => {\n            modal.getRoot().on(ModalEvents.hidden, () => {\n                // Focus on the action select when the dialog is closed.\n                const bulkActionSelector = root.querySelector(Selectors.bulkActionSelect);\n                resetBulkAction(bulkActionSelector);\n                bulkActionSelector.focus();\n            });\n\n            modal.getRoot().on(ModalEvents.save, () => {\n                submitAddNote(modal, users);\n            });\n\n            modal.show();\n\n            return modal;\n        });\n    };\n\n    /**\n     * Add a note to this list of users.\n     *\n     * @param {Modal} modal\n     * @param {Number[]} users\n     * @return {Promise}\n     */\n    const submitAddNote = (modal, users) => {\n        const text = modal.getRoot().find('form textarea').val();\n        const publishstate = modal.getRoot().find('form select').val();\n\n        const notes = users.map(userid => {\n            return {\n                userid,\n                text,\n                courseid: root.dataset.courseId,\n                publishstate,\n            };\n        });\n\n        return Repository.createNotesForUsers(notes)\n        .then(noteIds => {\n            if (noteIds.length === 1) {\n                return Str.get_string('addbulknotedonesingle', 'core_notes');\n            } else {\n                return Str.get_string('addbulknotedone', 'core_notes', noteIds.length);\n            }\n        })\n        .then(msg => notifyUser(msg))\n        .catch(Notification.exception);\n    };\n\n    /**\n     * Show the send message popup.\n     *\n     * @param {Number[]} users\n     * @return {Promise}\n     */\n    const showSendMessage = users => {\n        if (!users.length) {\n            // Nothing to do.\n            return Promise.resolve();\n        }\n\n        let titlePromise;\n        if (users.length === 1) {\n            titlePromise = Str.get_string('sendbulkmessagesingle', 'core_message');\n        } else {\n            titlePromise = Str.get_string('sendbulkmessage', 'core_message', users.length);\n        }\n\n        return ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            body: Templates.render('core_user/send_bulk_message', {}),\n            title: titlePromise,\n            buttons: {\n                save: titlePromise,\n            },\n        })\n        .then(modal => {\n            modal.getRoot().on(ModalEvents.hidden, () => {\n                // Focus on the action select when the dialog is closed.\n                const bulkActionSelector = root.querySelector(Selectors.bulkActionSelect);\n                resetBulkAction(bulkActionSelector);\n                bulkActionSelector.focus();\n            });\n\n            modal.getRoot().on(ModalEvents.save, () => {\n                submitSendMessage(modal, users);\n            });\n\n            modal.show();\n\n            return modal;\n        });\n    };\n\n    /**\n     * Send a message to these users.\n     *\n     * @param {Modal} modal\n     * @param {Number[]} users\n     * @return {Promise}\n     */\n    const submitSendMessage = (modal, users) => {\n        const text = modal.getRoot().find('form textarea').val();\n\n        const messages = users.map(touserid => {\n            return {\n                touserid,\n                text,\n            };\n        });\n\n        return Repository.sendMessagesToUsers(messages)\n        .then(messageIds => {\n            if (messageIds.length == 1) {\n                return Str.get_string('sendbulkmessagesentsingle', 'core_message');\n            } else {\n                return Str.get_string('sendbulkmessagesent', 'core_message', messageIds.length);\n            }\n        })\n        .then(msg => notifyUser(msg))\n        .catch(Notification.exception);\n    };\n\n    registerEventListeners();\n};\n"],"file":"participants.min.js"}