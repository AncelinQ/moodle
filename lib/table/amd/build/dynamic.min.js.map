{"version":3,"sources":["../src/dynamic.js"],"names":["getFiltersetFromTable","tableRoot","JSON","parse","dataset","tableFilters","updateTable","filterset","tableHandler","tableUniqueid","sortBy","sortOrder","joinType","jointype","filters","then","data","placeholder","document","createElement","innerHTML","html","replaceWith","childNodes","init","addEventListener","e","target","closest","Selectors","table","region","sortableLink","sortablelink","preventDefault","sortby","sortorder","updatetTableFromFilters","matches","Error","stringify"],"mappings":"wPAwBA,kU,8VAQMA,CAAAA,CAAqB,CAAG,SAAAC,CAAS,CAAI,CACvC,MAAOC,CAAAA,IAAI,CAACC,KAAL,CAAWF,CAAS,CAACG,OAAV,CAAkBC,YAA7B,CACV,C,CAQYC,CAAW,CAAG,SAAAL,CAAS,CAAI,CACpC,GAAMM,CAAAA,CAAS,CAAGP,CAAqB,CAACC,CAAD,CAAvC,CAEA,MAAO,YACHA,CAAS,CAACG,OAAV,CAAkBI,YADf,CAEHP,CAAS,CAACG,OAAV,CAAkBK,aAFf,CAGH,CACIC,MAAM,CAAET,CAAS,CAACG,OAAV,CAAkBM,MAD9B,CAEIC,SAAS,CAAEV,CAAS,CAACG,OAAV,CAAkBO,SAFjC,CAGIC,QAAQ,CAAEL,CAAS,CAACM,QAHxB,CAIIC,OAAO,CAAEP,CAAS,CAACO,OAJvB,CAHG,EAUNC,IAVM,CAUD,SAAAC,CAAI,CAAI,CACV,GAAMC,CAAAA,CAAW,CAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAApB,CACAF,CAAW,CAACG,SAAZ,CAAwBJ,CAAI,CAACK,IAA7B,CACApB,CAAS,CAACqB,WAAV,OAAArB,CAAS,GAAgBgB,CAAW,CAACM,UAA5B,EAAT,CAEA,MAAOP,CAAAA,CACV,CAhBM,CAiBV,C,wBAKmB,QAAPQ,CAAAA,IAAO,EAAM,CACtBN,QAAQ,CAACO,gBAAT,CAA0B,OAA1B,CAAmC,SAAAC,CAAC,CAAI,CACpC,GAAMzB,CAAAA,CAAS,CAAGyB,CAAC,CAACC,MAAF,CAASC,OAAT,CAAiBC,CAAS,CAACC,KAAV,CAAgBC,MAAjC,CAAlB,CACA,GAAI,CAAC9B,CAAL,CAAgB,CACZ,MACH,CAED,GAAM+B,CAAAA,CAAY,CAAGN,CAAC,CAACC,MAAF,CAASC,OAAT,CAAiBC,CAAS,CAACC,KAAV,CAAgBG,YAAjC,CAArB,CACA,GAAID,CAAJ,CAAkB,CACdN,CAAC,CAACQ,cAAF,GAEAjC,CAAS,CAACG,OAAV,CAAkBM,MAAlB,CAA2BsB,CAAY,CAAC5B,OAAb,CAAqB+B,MAAhD,CACAlC,CAAS,CAACG,OAAV,CAAkBO,SAAlB,CAA8BqB,CAAY,CAAC5B,OAAb,CAAqBgC,SAAnD,CAEA9B,CAAW,CAACL,CAAD,CACd,CACJ,CAfD,CAgBH,C,CASM,GAAMoC,CAAAA,CAAuB,CAAG,SAACpC,CAAD,CAAYa,CAAZ,CAAwB,CAC3D,GAAI,CAACb,CAAS,CAACqC,OAAV,CAAkBT,CAAS,CAACC,KAAV,CAAgBC,MAAlC,CAAL,CAAgD,CAE5C,KAAM,IAAIQ,CAAAA,KAAJ,CAAU,kEAAV,CACT,CAEDtC,CAAS,CAACG,OAAV,CAAkBU,OAAlB,CAA4BZ,IAAI,CAACsC,SAAL,CAAe1B,CAAf,CAA5B,CAEA,MAAOR,CAAAA,CAAW,CAACL,CAAD,CACrB,CATM,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to handle dynamic table features.\n *\n * @module     core_table/dynamic\n * @package    core_table\n * @copyright  2020 Simey Lameze <simey@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {fetch as fetchTableData} from 'core_table/local/dynamic/repository';\nimport * as Selectors from 'core_table/local/dynamic/selectors';\n\n/**\n * Get the filterset data from a known dynamic table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Object}\n */\nconst getFiltersetFromTable = tableRoot => {\n    return JSON.parse(tableRoot.dataset.tableFilters);\n};\n\n/**\n * Update the specified table based on its current values.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Promise}\n */\nexport const updateTable = tableRoot => {\n    const filterset = getFiltersetFromTable(tableRoot);\n\n    return fetchTableData(\n        tableRoot.dataset.tableHandler,\n        tableRoot.dataset.tableUniqueid,\n        {\n            sortBy: tableRoot.dataset.sortBy,\n            sortOrder: tableRoot.dataset.sortOrder,\n            joinType: filterset.jointype,\n            filters: filterset.filters,\n        }\n    )\n    .then(data => {\n        const placeholder = document.createElement('div');\n        placeholder.innerHTML = data.html;\n        tableRoot.replaceWith(...placeholder.childNodes);\n\n        return data;\n    });\n};\n\n/**\n * Set up listeners to handle table updates.\n */\nexport const init = () => {\n    document.addEventListener('click', e => {\n        const tableRoot = e.target.closest(Selectors.table.region);\n        if (!tableRoot) {\n            return;\n        }\n\n        const sortableLink = e.target.closest(Selectors.table.sortablelink);\n        if (sortableLink) {\n            e.preventDefault();\n\n            tableRoot.dataset.sortBy = sortableLink.dataset.sortby;\n            tableRoot.dataset.sortOrder = sortableLink.dataset.sortorder;\n\n            updateTable(tableRoot);\n        }\n    });\n};\n\n/**\n * Update the specified table using the new filters.\n *\n * @param {HTMLElement} tableRoot\n * @param {Object} filters\n * @returns {Promise}\n */\nexport const updatetTableFromFilters = (tableRoot, filters) => {\n    if (!tableRoot.matches(Selectors.table.region)) {\n        // The table is not a dynamic table.\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\n    }\n\n    tableRoot.dataset.filters = JSON.stringify(filters);\n\n    return updateTable(tableRoot);\n};\n"],"file":"dynamic.min.js"}