{"version":3,"sources":["../../../src/local/aria/aria-hidden.js"],"names":["childObserverMap","Map","siblingObserverMap","disableElementFocusability","target","updateFocus","element","dataset","ariaHiddenTabIndex","getAttribute","setAttribute","matches","Selectors","elements","focusable","querySelectorAll","forEach","enableElementFocusability","closest","aria","hidden","oldTabIndex","removeAttribute","focusableToUnhide","hide","HTMLElement","MutationObserver","newNodeObserver","mutationList","mutation","addedNodes","observe","childList","subtree","set","unhide","has","get","disconnect","delete","hideSiblings","parentElement","childNodes","node","unhideSiblings"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * ARIA helpers related to the aria-hidden attribute.\n *\n * @module     core/local/aria/aria-hidden.\n * @class      aria\n * @package    core\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Selectors from './selectors';\n\n// The map of MutationObserver objects for an object.\nconst childObserverMap = new Map();\nconst siblingObserverMap = new Map();\n\n/**\n * Disable element focusability, disabling the tabindex for child elements which are normally focusable.\n *\n * @param {HTMLElement} target\n */\nconst disableElementFocusability = target => {\n    const updateFocus = element => {\n        if (typeof element.dataset.ariaHiddenTabIndex !== 'undefined') {\n            // This child already has a hidden attribute.\n            // Do not modify it as the original value will be lost.\n            return;\n        }\n\n        // Store the old tabindex in a data attribute.\n        if (element.getAttribute('tabindex')) {\n            element.dataset.ariaHiddenTabIndex = element.getAttribute('tabindex');\n        } else {\n            element.dataset.ariaHiddenTabIndex = '';\n        }\n        element.setAttribute('tabindex', -1);\n    };\n\n    if (target.matches(Selectors.elements.focusable)) {\n        updateFocus(target);\n    }\n\n    target.querySelectorAll(Selectors.elements.focusable).forEach(updateFocus);\n};\n\n/**\n * Re-enable element focusability, restoring any tabindex.\n *\n * @param {HTMLElement} target\n */\nconst enableElementFocusability = target => {\n    const updateFocus = element => {\n        if (element.closest(Selectors.aria.hidden)) {\n            // This item still has a hidden parent, or is hidden itself. Do not unhide it.\n            return;\n        }\n\n        const oldTabIndex = element.dataset.ariaHiddenTabIndex;\n        if (oldTabIndex === '') {\n            element.removeAttribute('tabindex');\n        } else {\n            element.setAttribute('tabindex', oldTabIndex);\n        }\n\n        delete element.dataset.ariaHiddenTabIndex;\n    };\n\n    if (target.matches(Selectors.elements.focusableToUnhide)) {\n        updateFocus(target);\n    }\n\n    target.querySelectorAll(Selectors.elements.focusableToUnhide).forEach(updateFocus);\n};\n\n/**\n * Update the supplied DOM Module to be hidden.\n *\n * @param {HTMLElement} target\n */\nexport const hide = target => {\n    if (!(target instanceof HTMLElement)) {\n        // This element is not an HTMLElement.\n        // This can happen for Text Nodes.\n        return;\n    }\n\n    if (target.closest(Selectors.aria.hidden)) {\n        // This Element, or a parent Element, is already hidden.\n        // Stop processing.\n        return;\n    }\n\n    // Set the aria-hidden attribute to true.\n    target.setAttribute('aria-hidden', true);\n\n    // Based on advice from https://dequeuniversity.com/rules/axe/4.3/aria-hidden-focus, upon setting the aria-hidden\n    // attribute, all focusable elements underneath that element should be modified such that they are not focusable.\n    disableElementFocusability(target);\n\n    if (MutationObserver && typeof MutationObserver === 'function') {\n        // Add a MutationObserver to check for new children to the tree.\n        const newNodeObserver = new MutationObserver(mutationList => {\n            mutationList.forEach(mutation => {\n                mutation.addedNodes.forEach(disableElementFocusability);\n            });\n        });\n\n        newNodeObserver.observe(target, {childList: true, subtree: true});\n        childObserverMap.set(target, newNodeObserver);\n    }\n};\n\n/**\n * Reverse the effect of the hide action.\n *\n * @param {HTMLElement} target\n */\nexport const unhide = target => {\n    if (!(target instanceof HTMLElement)) {\n        return;\n    }\n\n    // Note: The aria-hidden attribute should be removed, and not set to false.\n    // The presence of the attribute is sufficient for some browsers to treat it as being true, regardless of its value.\n    target.removeAttribute('aria-hidden');\n\n    // Restore the tabindex across all child nodes of the target.\n    enableElementFocusability(target);\n\n    // Remove the MutationObserver watching this tree.\n    if (childObserverMap.has(target)) {\n        childObserverMap.get(target).disconnect();\n        childObserverMap.delete(target);\n    }\n};\n\n/**\n * Correctly mark all siblings of the supplied target Element as hidden.\n *\n * @param {HTMLElement} target\n */\nexport const hideSiblings = target => {\n    if (!(target instanceof HTMLElement)) {\n        return;\n    }\n\n    if (!target.parentElement) {\n        return;\n    }\n\n    target.parentElement.childNodes.forEach(node => {\n        if (node === target) {\n            // Skip self;\n            return;\n        }\n\n        hide(node);\n    });\n\n    if (MutationObserver && typeof MutationObserver === 'function') {\n        // Add a MutationObserver to check for new children to the tree.\n        const newNodeObserver = new MutationObserver(mutationList => {\n            mutationList.forEach(mutation => {\n                mutation.addedNodes.forEach(node => {\n                    if (node === target) {\n                        // Skip self;\n                        return;\n                    }\n\n                    hide(node);\n                });\n            });\n        });\n\n        newNodeObserver.observe(target.parentElement, {childList: true, subtree: true});\n        siblingObserverMap.set(target.parentElement, newNodeObserver);\n    }\n};\n\n/**\n * Correctly reverse the hide action of all children of the supplied target Element.\n *\n * @param {HTMLElement} target\n */\nexport const unhideSiblings = target => {\n    if (!(target instanceof HTMLElement)) {\n        return;\n    }\n\n    if (!target.parentElement) {\n        return;\n    }\n\n    target.parentElement.childNodes.forEach(node => {\n        if (node === target) {\n            // Skip self;\n            return;\n        }\n\n        unhide(node);\n    });\n\n    // Remove the MutationObserver watching this tree.\n    if (siblingObserverMap.has(target.parentElement)) {\n        siblingObserverMap.get(target.parentElement).disconnect();\n        siblingObserverMap.delete(target.parentElement);\n    }\n};\n"],"file":"aria-hidden.min.js"}