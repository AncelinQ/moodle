{"version":3,"sources":["../../src/form/changechecker.js"],"names":["watchedForms","formChangeCheckerDisabled","watchForm","formNode","closest","isWatchingForm","push","unWatchForm","filter","watchedForm","contains","resetAllFormDirtyStates","map","dataset","formSubmitted","formDirty","markAllFormsAsDirty","disableAllChecks","isAnyWatchedFormDirty","hasSubmittedForm","some","hasDirtyForm","document","activeElement","propertyIsEnumerable","initialValue","value","window","tinyMCE","editors","editor","isDirty","getFormForNode","target","find","shouldIgnoreChangesForNode","markFormChangedFromNode","changedNode","markFormSubmitted","beforeUnloadHandler","e","warnBeforeUnload","M","cfg","behatsiterunning","preventDefault","returnValue","util","get_string","removeEventListener","startWatching","addEventListener","ignoredButton","ownerForm","ignoreSubmission","matches"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Form Content change detection.\n *\n * @module     core/form/changechecker\n * @package    core\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/** @var {Array} The list of watched forms */\nlet watchedForms = [];\n\n/** @var {Bool} Whether the form change checker has been actively disabled */\nlet formChangeCheckerDisabled = false;\n\n/**\n * Watch the specified form for changes.\n *\n * @param   {HTMLElement} formNode\n */\nexport const watchForm = formNode => {\n    // Normalise the formNode.\n    formNode = formNode.closest('form');\n\n    if (isWatchingForm(formNode)) {\n        // This form is already watched.\n        return;\n    }\n\n    watchedForms.push(formNode);\n};\n\n/**\n * Stop watching the specified form for changes.\n *\n * @param   {HTMLElement} formNode\n */\nexport const unWatchForm = formNode => {\n    // Normalise the formNode.\n    formNode = formNode.closest('form');\n\n    watchedForms = watchedForms.filter(watchedForm => !!watchedForm.contains(formNode));\n};\n\n/**\n * Reset all form dirty states.\n */\nexport const resetAllFormDirtyStates = () => {\n    watchedForms.map(watchedForm => {\n        watchedForm.dataset.formSubmitted = false;\n        watchedForm.dataset.formDirty = false;\n    });\n};\n\n/**\n * Mark all forms as dirty.\n *\n * This function is only for backwards-compliance with the old YUI module and should not beused in any other situation.\n * It will be removed in Moodle 4.3.\n */\nexport const markAllFormsAsDirty = () => {\n    watchedForms.map(watchedForm => {\n        watchedForm.dataset.formDirty = true;\n    });\n};\n\n/**\n * Ignore all form dirty states.\n */\nexport const disableAllChecks = () => {\n    formChangeCheckerDisabled = true;\n};\n\n/**\n * Check whether any watched from is dirty.\n *\n * @returns {Bool}\n */\nconst isAnyWatchedFormDirty = () => {\n    if (formChangeCheckerDisabled) {\n        // The form change checker is disabled.\n        return false;\n    }\n\n    const hasSubmittedForm = watchedForms.some(watchedForm => !!watchedForm.dataset.formSubmitted);\n    if (hasSubmittedForm) {\n        // Do not warn about submitted forms, ever.\n        return false;\n    }\n\n    const hasDirtyForm = watchedForms.some(watchedForm => {\n        if (watchedForm.dataset.formDirty) {\n            // The form has been marked as dirty.\n            return true;\n        }\n\n        // Elements currently holding focus will not have triggered change detection.\n        // Check whether the value matches the original value upon form load.\n        if (document.activeElement && document.activeElement.dataset.propertyIsEnumerable('initialValue')) {\n            if (document.activeElement.dataset.initialValue !== document.activeElement.value) {\n                return true;\n            }\n        }\n    });\n\n    if (hasDirtyForm) {\n        // At least one form is dirty.\n        return true;\n    }\n\n    // Handle TinyMCE editor instances.\n    // TinyMCE forms may not have been initialised at the time that startWatching is called.\n    // Check whether any tinyMCE editor is dirty.\n    if (typeof window.tinyMCE !== 'undefined') {\n        if (window.tinyMCE.editors.some(editor => editor.isDirty())) {\n            return true;\n        }\n    }\n\n    // No dirty forms detected.\n    return false;\n};\n\n/**\n * Get the watched form for the specified target.\n *\n * @param   {HTMLNode} target\n * @returns {HTMLFormElement}\n */\nconst getFormForNode = target => watchedForms.find(watchedForm => watchedForm.contains(target));\n\n/**\n * Whether the specified target is a watched form.\n *\n * @param   {HTMLNode} target\n * @returns {Bool}\n */\nconst isWatchingForm = target => watchedForms.some(watchedForm => watchedForm.contains(target));\n\n/**\n * Whether the specified target should ignore changes or not.\n *\n * @param   {HTMLNode} target\n * @returns {Bool}\n */\nconst shouldIgnoreChangesForNode = target => !!target.closest('.ignoredirty');\n\nexport const markFormChangedFromNode = changedNode => {\n    if (!isWatchingForm(changedNode)) {\n        // This form has not been watched.\n        return;\n    }\n\n    if (shouldIgnoreChangesForNode(changedNode)) {\n        // This node ignores changes.\n        return;\n    }\n\n    const formNode = getFormForNode(changedNode);\n\n    // Mark the form as dirty.\n    formNode.dataset.formDirty = true;\n};\n\nexport const markFormSubmitted = formNode => {\n    // Normalise the formNode.\n    formNode = formNode.closest('form');\n\n    formNode.dataset.formSubmitted = true;\n};\n\nconst beforeUnloadHandler = e => {\n    let warnBeforeUnload = isAnyWatchedFormDirty() && !M.cfg.behatsiterunning;\n    if (warnBeforeUnload) {\n        // According to the specification, to show the confirmation dialog an event handler should call preventDefault()\n        // on the event.\n        e.preventDefault();\n\n        // However note that not all browsers support this method, and some instead require the event handler to\n        // implement one of two legacy methods:\n        // * assigning a string to the event's returnValue property; and\n        // * returning a string from the event handler.\n\n        // Assigning a string to the event's returnValue property.\n        e.returnValue = M.util.get_string('changesmadereallygoaway', 'moodle');\n\n        // Returning a string from the event handler.\n        return e.returnValue;\n    }\n\n    // Attaching an event handler/listener to window or document's beforeunload event prevents browsers from using\n    // in-memory page navigation caches, like Firefox's Back-Forward cache or WebKit's Page Cache.\n    // Remove the handler.\n    window.removeEventListener('beforeunload', beforeUnloadHandler);\n};\n\nconst startWatching = () => {\n    document.addEventListener('change', e => {\n        if (!isWatchingForm(e.target)) {\n            return;\n        }\n\n        markFormChangedFromNode(e.target);\n    });\n\n    document.addEventListener('click', e => {\n        const ignoredButton = e.target.closest('[data-formchangechecker-ignore-submit]');\n        if (!ignoredButton) {\n            return;\n        }\n\n        const ownerForm = e.target.closest('form');\n        if (ownerForm) {\n            ownerForm.dataset.ignoreSubmission = true;\n        }\n    });\n\n    document.addEventListener('focusin', e => {\n        if (e.target.matches('input, textarea, select')) {\n            if (e.target.dataset.propertyIsEnumerable('initialValue')) {\n                // The initial value has already been set.\n                return;\n            }\n            e.target.dataset.initialValue = e.target.value;\n        }\n    });\n\n    document.addEventListener('submit', e => {\n        const formNode = e.closest('form');\n        if (!formNode) {\n            // Weird, but watch for this anyway.\n            return;\n        }\n\n        if (formNode.dataset.ignoreSubmission) {\n            // This form was submitted by a button which requested that the form checked should not mark it as submitted.\n            formNode.dataset.ignoreSubmission = false;\n            return;\n        }\n\n        markFormSubmitted(formNode);\n    });\n\n    window.addEventListener('beforeunload', beforeUnloadHandler);\n};\n\nstartWatching();\n"],"file":"changechecker.min.js"}