{"version":3,"sources":["../../src/grades/grader.js"],"names":["templateNames","contentRegion","getWholeForumFunctions","cmid","getPostContextFunction","userid","Repository","getDiscussionByUserID","getContentForUserId","getContentForUserIdFunction","postContextFunction","then","context","discussions","map","discussionPostMapper","Templates","render","catch","Notification","exception","getUsers","getUsersForCmidFunction","CourseRepository","getUsersFromCourseModuleID","users","getGradePanelFunctions","gradingComponent","itemName","component","GradingMethod","getter","userId","fetchCurrentGrade","setter","formData","storeCurrentGrade","findGradableNode","node","closest","Selectors","gradableItem","discussion","parentMap","Map","posts","parentposts","forEach","post","set","id","userPosts","userposts","subject","readonly","starter","parentid","parent","get","name","registerLaunchListeners","document","addEventListener","e","target","matches","launch","rootNode","Error","gradableItems","wholeForum","preventDefault","data","dataset","wholeForumFunctions","contextid","gradableItemtype","gradePanelFunctions","Grader","groupid","initialUserId","initialuserid"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module will tie together all of the different calls the gradable module will make.\n *\n * @module     mod_forum/grades/grader\n * @package    mod_forum\n * @copyright  2019 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Selectors from './grader/selectors';\nimport Repository from 'mod_forum/repository';\nimport Templates from 'core/templates';\nimport * as Grader from '../local/grades/grader';\nimport Notification from 'core/notification';\nimport CourseRepository from 'core_course/repository';\n\nconst templateNames = {\n    contentRegion: 'mod_forum/grades/grader/discussion/posts',\n};\n\nconst getWholeForumFunctions = (cmid) => {\n    const getPostContextFunction = () => {\n        return (userid) => {\n            return Repository.getDiscussionByUserID(userid, cmid);\n        };\n    };\n\n    const getContentForUserIdFunction = () => {\n        const postContextFunction = getPostContextFunction(cmid);\n        return userid => {\n            return postContextFunction(userid)\n            .then(context => {\n                // Rebuild the returned data for the template.\n                context.discussions = context.discussions.map(discussionPostMapper);\n\n                return Templates.render(templateNames.contentRegion, context);\n            })\n            .catch(Notification.exception);\n        };\n    };\n\n    const getUsersForCmidFunction = () => {\n        return () => {\n            return CourseRepository.getUsersFromCourseModuleID(cmid)\n                .then((context) => {\n                    return context.users;\n                })\n                .catch(Notification.exception);\n        };\n    };\n\n    return {\n        getContentForUserId: getContentForUserIdFunction(),\n        getUsers: getUsersForCmidFunction()\n    };\n};\n\nconst getGradePanelFunctions = async(context, gradingComponent, itemName) => {\n    const component = 'mod_forum';\n    const GradingMethod = await import(`${gradingComponent}/local/grader/gradingpanel`);\n\n    return {\n        getter: userId => GradingMethod.fetchCurrentGrade(component, context, itemName, userId),\n        setter: (userId, formData) => GradingMethod.storeCurrentGrade(component, context, itemName, userId, formData),\n    };\n};\n\nconst findGradableNode = (node) => {\n    return node.closest(Selectors.gradableItem);\n};\n\nconst discussionPostMapper = discussion => {\n    // Map postid => post.\n    const parentMap = new Map();\n    discussion.posts.parentposts.forEach(post => parentMap.set(post.id, post));\n\n    const userPosts = discussion.posts.userposts.map(post => {\n        post.subject = null;\n        post.readonly = true;\n        post.starter = !post.parentid;\n        post.parent = parentMap.get(post.parentid);\n\n        return post;\n    });\n\n    return {\n        id: discussion.id,\n        name: discussion.name,\n        posts: userPosts,\n    };\n};\n\nexport const registerLaunchListeners = () => {\n    document.addEventListener('click', async(e) => {\n        if (e.target.matches(Selectors.launch)) {\n            const rootNode = findGradableNode(e.target);\n\n            if (!rootNode) {\n                throw Error('Unable to find a gradable item');\n            }\n\n            if (rootNode.matches(Selectors.gradableItems.wholeForum)) {\n                e.preventDefault();\n\n                const data = rootNode.dataset;\n                const wholeForumFunctions = getWholeForumFunctions(rootNode.dataset.cmid);\n                const gradePanelFunctions = await getGradePanelFunctions(\n                    data.contextid,\n                    data.gradingComponent,\n                    data.gradableItemtype\n                );\n\n                Grader.launch(\n                    wholeForumFunctions.getUsers,\n                    wholeForumFunctions.getContentForUserId,\n                    gradePanelFunctions.getter,\n                    gradePanelFunctions.setter,\n                    {\n                        groupid: rootNode.dataset.groupid,\n                        initialUserId: rootNode.dataset.initialuserid,\n                    }\n                );\n            } else {\n                throw Error('Unable to find a valid gradable item');\n            }\n        }\n    });\n};\n"],"file":"grader.min.js"}